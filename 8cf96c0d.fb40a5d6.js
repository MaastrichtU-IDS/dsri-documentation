(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{101:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return s})),r.d(t,"rightToc",(function(){return c})),r.d(t,"default",(function(){return u}));var a=r(3),o=r(7),n=(r(0),r(143)),l=["components"],i={id:"workflows-airflow",title:"Deploy Airflow"},s={unversionedId:"workflows-airflow",id:"workflows-airflow",isDocsHomePage:!1,title:"Deploy Airflow",description:"Deploy Apache Airflow to run workflows (aka. DAGs), hosted in a Git repository, on the DSRI.",source:"@site/docs/workflows-airflow.md",slug:"/workflows-airflow",permalink:"/dsri-documentation/docs/workflows-airflow",editUrl:"https://github.com/MaastrichtU-IDS/dsri-documentation/edit/master/website/docs/workflows-airflow.md",version:"current",lastUpdatedBy:"Vincent Emonet",lastUpdatedAt:1629875046,sidebar:"docs",previous:{title:"Deploy GitHub Runners",permalink:"/dsri-documentation/docs/workflows-github-actions"},next:{title:"Run Argo workflows",permalink:"/dsri-documentation/docs/workflows-argo"}},c=[{value:"Install the chart",id:"install-the-chart",children:[]},{value:"Deploy Airflow",id:"deploy-airflow",children:[]},{value:"Example workflows",id:"example-workflows",children:[]},{value:"Delete the chart",id:"delete-the-chart",children:[]}],p={rightToc:c};function u(e){var t=e.components,r=Object(o.a)(e,l);return Object(n.b)("wrapper",Object(a.a)({},p,r,{components:t,mdxType:"MDXLayout"}),Object(n.b)("p",null,"Deploy Apache Airflow to run workflows (aka. DAGs), hosted in a Git repository, on the DSRI. "),Object(n.b)("p",null,"For more informations about Apache Airflow, go to ",Object(n.b)("a",{parentName:"p",href:"https://airflow.apache.org"},"https://airflow.apache.org")),Object(n.b)("p",null,"Here are a few links for more details on the official Airflow Helm chart:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",{parentName:"li",href:"https://airflow.apache.org/docs/helm-chart/stable/index.html"},"Helm chart docs")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",{parentName:"li",href:"https://github.com/apache/airflow/tree/main/chart"},"Helm chart source code")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",{parentName:"li",href:"https://airflow.apache.org/docs/helm-chart/stable/parameters-ref.html"},"Helm chart parameters"))),Object(n.b)("h2",{id:"install-the-chart"},"Install the chart"),Object(n.b)("p",null,"You will need to have Helm installed on your computer to deploy a GitHub Actions Runner, see the ",Object(n.b)("a",{parentName:"p",href:"/docs/helm"},"Helm docs")," for more details."),Object(n.b)("p",null,"Install the Helm chart to be able to deploy Airflow on the DSRI:"),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-bash"},"helm repo add apache-airflow https://airflow.apache.org\nhelm repo update\n")),Object(n.b)("h2",{id:"deploy-airflow"},"Deploy Airflow"),Object(n.b)("p",null,"You will need to define the parameters of your Airflow deployment in a ",Object(n.b)("inlineCode",{parentName:"p"},"values.yml")," file, use ",Object(n.b)("a",{parentName:"p",href:"https://github.com/MaastrichtU-IDS/dsri-documentation/blob/master/applications/airflow/values.yml"},"this file")," as base, and edit it to use your own dags. Download the file:"),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-bash"},"wget https://raw.githubusercontent.com/MaastrichtU-IDS/dsri-documentation/master/applications/airflow/values.yml\n")),Object(n.b)("p",null,"Deploy Airflow with the parameters defined in ",Object(n.b)("inlineCode",{parentName:"p"},"values.yml")," and a password for the web interface. The dags in Airflow will be automatically synchronized with the GitHub repository defined in the ",Object(n.b)("inlineCode",{parentName:"p"},"gitSync")," parameter:"),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-bash"},"helm install airflow apache-airflow/airflow \\\n    -f values.yml \\\n    --set webserver.defaultUser.password=yourpassword\n")),Object(n.b)("p",null,"Fix the postgresql deployment (because setting the ",Object(n.b)("inlineCode",{parentName:"p"},"serviceAccount.name")," of the sub chart ",Object(n.b)("inlineCode",{parentName:"p"},"postgresql")," don't work, but should be possible according to the ",Object(n.b)("a",{parentName:"p",href:"https://helm.sh/docs/chart_template_guide/subcharts_and_globals/"},"official helm docs"),"):"),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-bash"},'oc patch statefulset/airflow-postgresql --patch \'{"spec":{"template":{"spec": {"serviceAccountName": "anyuid"}}}}\'\n')),Object(n.b)("p",null,"To access it you can forward the webserver on your machine http://localhost:8080"),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-bash"},"oc port-forward svc/airflow-webserver 8080\n")),Object(n.b)("p",null,"Or expose the service on a URL (accessible when on the UM VPN) with HTTPS enabled:"),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-bash"},'oc expose svc/airflow-webserver\noc patch route/airflow-webserver --patch \'{"spec":{"tls": {"termination": "edge", "insecureEdgeTerminationPolicy": "Redirect"}}}\'\n')),Object(n.b)("h2",{id:"example-workflows"},"Example workflows"),Object(n.b)("p",null,"You can find example DAGs for bash operator, python operator and Kubernetes pod operator ",Object(n.b)("a",{parentName:"p",href:"https://github.com/MaastrichtU-IDS/dsri-documentation/tree/master/applications/airflow/dags"},"here"),"."),Object(n.b)("p",null,"Here an example of a DAG using the Kubernetes pod operator to run tasks as pods, you will need to change the ",Object(n.b)("inlineCode",{parentName:"p"},"namespace")," parameter to your DSRI project where Airflow is deployed:"),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-python"},"from airflow import DAG\nfrom datetime import datetime, timedelta\nfrom airflow.contrib.operators.kubernetes_pod_operator import KubernetesPodOperator\nfrom airflow.operators.dummy_operator import DummyOperator\n\ndefault_args = {\n    'owner': 'airflow',\n    'depends_on_past': False,\n    'start_date': datetime.utcnow(),\n    'email': ['airflow@example.com'],\n    'email_on_failure': False,\n    'email_on_retry': False,\n    'retries': 1,\n    'retry_delay': timedelta(minutes=5)\n}\ndag = DAG(\n    'kubernetes_pod_operator',\n    default_args=default_args, \n    schedule_interval=None\n    # schedule_interval=timedelta(minutes=10)\n)\n\nstart = DummyOperator(task_id='run_this_first', dag=dag)\n\npassing = KubernetesPodOperator(\n    namespace='CHANGEME',\n    image=\"python:3.6\",\n    cmds=[\"python\",\"-c\"],\n    arguments=[\"print('hello world')\"],\n    labels={\"app\": \"airflow\"},\n    name=\"passing-test\",\n    task_id=\"passing-task\",\n    get_logs=True,\n    dag=dag\n)\n\npassing.set_upstream(start)\n")),Object(n.b)("h2",{id:"delete-the-chart"},"Delete the chart"),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-bash"},"helm uninstall airflow\n")))}u.isMDXComponent=!0},143:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return m}));var a=r(0),o=r.n(a);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,o=function(e,t){if(null==e)return{};var r,a,o={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=o.a.createContext({}),p=function(e){var t=o.a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var r=e.components,a=e.mdxType,n=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(r),d=a,m=u["".concat(l,".").concat(d)]||u[d]||b[d]||n;return r?o.a.createElement(m,i(i({ref:t},c),{},{components:r})):o.a.createElement(m,i({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=r.length,l=new Array(n);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<n;c++)l[c]=r[c];return o.a.createElement.apply(null,l)}return o.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"}}]);