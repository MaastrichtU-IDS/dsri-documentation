---
kind: Template
apiVersion: template.openshift.io/v1
labels:
  template: wikidata-query-service
metadata:
  name: wikidata-query-service
  annotations:
    openshift.io/display-name: Wikidata Query Service
    description: |-
      Start the Wikibase Query Service (used for Wikidata)

      Deploying: wdqs (Blazegraph), wdqs-proxy, wdqs-frontend
      Based on https://github.com/wmde/wikibase-docker
    iconClass: icon-mediawiki
    tags: wikibase,blazegraph,query,wikidata
    openshift.io/provider-display-name: Institute of Data Science, UM
    openshift.io/documentation-url: https://maastrichtu-ids.github.io/dsri-documentation/docs
    openshift.io/support-url: https://maastrichtu-ids.github.io/dsri-documentation/help
parameters:
- name: APPLICATION_NAME
  value: wikidata
  required: true
- name: PASSWORD
  description: The password/token to access the application
  required: true
  # generate: expression
  # from: "[a-zA-Z0-9]{12}"
- name: STORAGE_SIZE
  displayName: Storage size
  description: Size of the storage allocated to the notebook persistent storage in `/home/jovyan`.
  value: 10Gi
  required: true
# - name: MEMORY_LIMIT
#   displayName: Memory limit
#   description: Maximum RAM memory available for the application.
#   value: "5Gi"
#   required: true
# - name: CPU_LIMIT
#   displayName: CPU limit
#   description: Number of CPUs available for the application.
#   value: "2"
#   required: true
objects:
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-password: "{.data['application-password']}"
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  stringData:
    application-password: "${PASSWORD}"

## DEPLOY QUERY SERVICE BASE(blazegraph)
- apiVersion: "v1"
  kind: "PersistentVolumeClaim"
  metadata:
    name: ${APPLICATION_NAME}-query-service-data
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    accessModes:
      - "ReadWriteMany"
    resources:
      requests:
        storage: ${STORAGE_SIZE}

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-query"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ConfigChange
    replicas: 1
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}"
    template:
      metadata:
        labels:
          app: "${APPLICATION_NAME}"
          deploymentconfig: "${APPLICATION_NAME}-query"
      spec:
        serviceAccountName: anyuid
        # nodeSelector:
        #   dsri.unimaas.nl/cpu: 'true'
        containers:
        - name: wdqs-service-container
          image: "wikibase/wdqs:0.3.40"
          command:
          - /runBlazegraph.sh
          ports:
          - containerPort: 9999
            protocol: TCP
          # resources:
          #   requests: 
          #     cpu: "${CPU_LIMIT}"
          #     memory: "${MEMORY_LIMIT}"
          #   limits:
          #     cpu: "128"
          #     memory: "300Gi"
          env:
          - name: WIKIBASE_HOST
            value: "${APPLICATION_NAME}"
          - name: WDQS_HOST
            value: "${APPLICATION_NAME}-query"
            # value: "wdqs.svc"
          - name: WDQS_PORT
            value: "9999"
          volumeMounts:
          - name: query-service-data
            mountPath: "/wdqs/data"
        automountServiceAccountToken: false
        # securityContext:
        #   runAsUser: 0
        #   supplementalGroups:
        #   - 100
        volumes:
        - name: query-service-data
          persistentVolumeClaim:
            claimName: "${APPLICATION_NAME}-query-service-data"

- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-query"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    ports:
    - name: 9999-tcp
      protocol: TCP
      port: 9999
      targetPort: 9999
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}-query"
    type: ClusterIP
- kind: Route
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-query"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    host: ''
    to:
      kind: Service
      name: "${APPLICATION_NAME}-query"
      weight: 100
    port:
      targetPort: 9999-tcp
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect


## DEPLOY QUERY SERVICE PROXY
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-proxy"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ConfigChange
    replicas: 1
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}-proxy"
    template:
      metadata:
        labels:
          app: "${APPLICATION_NAME}"
          deploymentconfig: "${APPLICATION_NAME}-proxy"
      spec:
        serviceAccountName: anyuid
        # nodeSelector:
        #   dsri.unimaas.nl/cpu: 'true'
        containers:
        - name: wdqs-proxy-container
          image: "wikibase/wdqs-proxy"
          ports:
          - containerPort: 80
            protocol: TCP
          # resources:
          #   requests: 
          #     cpu: "${CPU_LIMIT}"
          #     memory: "${MEMORY_LIMIT}"
          #   limits:
          #     cpu: "128"
          #     memory: "300Gi"
          env:
          - name: PROXY_PASS_HOST
            value: "${APPLICATION_NAME}-query:9999"
        automountServiceAccountToken: false

- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-proxy"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    ports:
    - name: 8989-tcp
      protocol: TCP
      port: 8989
      targetPort: 80
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}-proxy"
    type: ClusterIP
- kind: Route
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-proxy"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    host: ''
    to:
      kind: Service
      name: "${APPLICATION_NAME}-proxy"
      weight: 100
    port:
      targetPort: 8989-tcp
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect


## DEPLOY QUERY SERVICE FRONTEND
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-frontend"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ConfigChange
    replicas: 1
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}-frontend"
    template:
      metadata:
        labels:
          app: "${APPLICATION_NAME}"
          deploymentconfig: "${APPLICATION_NAME}-frontend"
      spec:
        serviceAccountName: anyuid
        # nodeSelector:
        #   dsri.unimaas.nl/cpu: 'true'
        containers:
        - name: wdqs-frontend-container
          image: "wikibase/wdqs-frontend:latest"
          ports:
          - containerPort: 80
            protocol: TCP
          # resources:
          #   requests: 
          #     cpu: "${CPU_LIMIT}"
          #     memory: "${MEMORY_LIMIT}"
          #   limits:
          #     cpu: "128"
          #     memory: "300Gi"
          env:
          - name: WIKIBASE_HOST
            value: "${APPLICATION_NAME}"
            # TODO: We use blazegraph service instead of Wikibase
          #   value: "wikibase.svc"
          - name: WDQS_HOST
            value: "${APPLICATION_NAME}-proxy"
            # value: "${APPLICATION_NAME}-query"
        automountServiceAccountToken: false

- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-frontend"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    ports:
    - name: 8989-tcp
      protocol: TCP
      port: 8989
      targetPort: 80
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}-frontend"
    type: ClusterIP
- kind: Route
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-frontend"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    host: ''
    to:
      kind: Service
      name: "${APPLICATION_NAME}-frontend"
      weight: 100
    port:
      targetPort: 8989-tcp
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect


## DEPLOY MySQL
- apiVersion: "v1"
  kind: "PersistentVolumeClaim"
  metadata:
    name: ${APPLICATION_NAME}-mysql
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    accessModes:
      - "ReadWriteMany"
    resources:
      requests:
        storage: ${STORAGE_SIZE}
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-mysql"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ConfigChange
    replicas: 1
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}-mysql"
    template:
      metadata:
        labels:
          app: "${APPLICATION_NAME}"
          deploymentconfig: "${APPLICATION_NAME}-mysql"
      spec:
        # serviceAccountName: anyuid
        containers:
        - name: mysql-container
          image: "mariadb:10.3"
          ports:
          - containerPort: 3306
            protocol: TCP
          # resources:
          #   requests: 
          #     cpu: "${CPU_LIMIT}"
          #     memory: "${MEMORY_LIMIT}"
          #   limits:
          #     cpu: "128"
          #     memory: "300Gi"
          env:
          - name: MYSQL_RANDOM_ROOT_PASSWORD
            value: "yes"
          - name: MYSQL_DATABASE
            value: "my_wiki"
          - name: MYSQL_USER
            value: "wikiuser"
          - name: MYSQL_PASSWORD
            value: "sqlpass"
          volumeMounts:
          - name: data
            mountPath: "/var/lib/mysql"
        automountServiceAccountToken: false
        volumes:
        - name: data
          persistentVolumeClaim:
            claimName: "${APPLICATION_NAME}-mysql"

- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-mysql"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    ports:
    - name: 3306-tcp
      protocol: TCP
      port: 3306
      targetPort: 3306
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}-mysql"
    type: ClusterIP


## DEPLOY ElasticSearch
# - apiVersion: "v1"
#   kind: "PersistentVolumeClaim"
#   metadata:
#     name: ${APPLICATION_NAME}-elasticsearch
#     labels:
#       app: "${APPLICATION_NAME}"
#   spec:
#     accessModes:
#       - "ReadWriteMany"
#     resources:
#       requests:
#         storage: ${STORAGE_SIZE}
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-elasticsearch"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ConfigChange
    replicas: 1
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}-elasticsearch"
    template:
      metadata:
        labels:
          app: "${APPLICATION_NAME}"
          deploymentconfig: "${APPLICATION_NAME}-elasticsearch"
      spec:
        # serviceAccountName: anyuid
        containers:
        - name: elasticsearch-container
          image: "wikibase/elasticsearch:6.5.4-extra"
          ports:
          - containerPort: 9200
            protocol: TCP
          env:
          - name: discovery.type
            value: "single-node"
          - name: ES_JAVA_OPTS
            value: "-Xms512m -Xmx512m"
        #   volumeMounts:
        #   - name: data
        #     mountPath: "/var/lib/mysql"
        # automountServiceAccountToken: false
        # volumes:
        # - name: data
        #   persistentVolumeClaim:
        #     claimName: "${APPLICATION_NAME}-elasticsearch"

- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-elasticsearch"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    ports:
    - name: 9200-tcp
      protocol: TCP
      port: 9200
      targetPort: 9200
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}-elasticsearch"
    type: ClusterIP



## DEPLOY QuickStatements
# depends_on: - wikibase
- apiVersion: "v1"
  kind: "PersistentVolumeClaim"
  metadata:
    name: ${APPLICATION_NAME}-quickstatements
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    accessModes:
      - "ReadWriteMany"
    resources:
      requests:
        storage: ${STORAGE_SIZE}
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-quickstatements"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ConfigChange
    replicas: 1
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}-quickstatements"
    template:
      metadata:
        labels:
          app: "${APPLICATION_NAME}"
          deploymentconfig: "${APPLICATION_NAME}-quickstatements"
      spec:
        serviceAccountName: anyuid
        containers:
        - name: quickstatements-container
          image: "wikibase/elasticsearch:6.5.4-extra"
          ports:
          - containerPort: 80
            protocol: TCP
          env:
          - name: QS_PUBLIC_SCHEME_HOST_AND_PORT
            value: "http://localhost:9191"
          - name: WB_PUBLIC_SCHEME_HOST_AND_PORT
            value: "http://localhost:8181"
          - name: WIKIBASE_SCHEME_AND_HOST
            value: "http://${APPLICATION_NAME}"
          - name: WB_PROPERTY_NAMESPACE
            value: "122"
          - name: WB_PROPERTY_PREFIX
            value: "Property:"
          - name: WB_ITEM_NAMESPACE
            value: "120"
          - name: WB_ITEM_PREFIX
            value: "Item:"
          volumeMounts:
          - name: data
            mountPath: "/quickstatements/data"
        automountServiceAccountToken: false
        volumes:
        - name: data
          persistentVolumeClaim:
            claimName: "${APPLICATION_NAME}-quickstatements"

- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-quickstatements"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    ports:
    - name: 9191-tcp
      protocol: TCP
      port: 9191
      targetPort: 80
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}-quickstatements"
    type: ClusterIP



## DEPLOY Updater
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-updater"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ConfigChange
    replicas: 1
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}-updater"
    template:
      metadata:
        labels:
          app: "${APPLICATION_NAME}"
          deploymentconfig: "${APPLICATION_NAME}-updater"
      spec:
        serviceAccountName: anyuid
        containers:
        - name: updater-container
          image: "wikibase/wdqs:0.3.40"
          command:
            - "/runUpdate.sh"
          # ports:
          # - containerPort: 3306
          #   protocol: TCP
          # resources:
          #   requests: 
          #     cpu: "${CPU_LIMIT}"
          #     memory: "${MEMORY_LIMIT}"
          #   limits:
          #     cpu: "128"
          #     memory: "300Gi"
          env:
          - name: WIKIBASE_HOST
            value: "${APPLICATION_NAME}"
          - name: WDQS_HOST
            value: "${APPLICATION_NAME}-query"
          - name: WDQS_PORT
            value: "9999"
        automountServiceAccountToken: false


## DEPLOY WIKIBASE
- apiVersion: "v1"
  kind: "PersistentVolumeClaim"
  metadata:
    name: ${APPLICATION_NAME}-wikibase
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    accessModes:
      - "ReadWriteMany"
    resources:
      requests:
        storage: ${STORAGE_SIZE}

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ConfigChange
    replicas: 1
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}"
    template:
      metadata:
        labels:
          app: "${APPLICATION_NAME}"
          deploymentconfig: "${APPLICATION_NAME}"
      spec:
        serviceAccountName: anyuid
        containers:
        - name: wikibase-container
          image: "wikibase/wikibase:1.35-bundle"
          ports:
          - containerPort: 80
            protocol: TCP
          env:
          - name: DB_SERVER
            value: "${APPLICATION_NAME}-mysql"
            # value: "${APPLICATION_NAME}-mysql:3306"
          - name: DB_USER
            value: "wikiuser"
          - name: DB_PASS
            value: "sqlpass"
          - name: DB_NAME
            value: "my_wiki"
          - name: QS_PUBLIC_SCHEME_HOST_AND_PORT
            value: "http://localhost:9191"
          - name: MW_ELASTIC_HOST
            value: "${APPLICATION_NAME}-elasticsearch"
          - name: MW_ELASTIC_PORT
            value: "9200"
          # TODO: Change login params here
          - name: MW_ADMIN_NAME
            value: "WikibaseAdmin"
          - name: MW_ADMIN_PASS
            value: "WikibaseDockerAdminPass"
          - name: MW_ADMIN_EMAIL
            value: "admin@example.com"
          - name: MW_WG_SECRET_KEY
            value: "secretkey"

          volumeMounts:
          - name: quickstatements-data
            mountPath: "/quickstatements/data"
          - name: mediawiki-images-data
            mountPath: "/var/www/html/images"
        automountServiceAccountToken: false
        volumes:
        - name: quickstatements-data
          persistentVolumeClaim:
            claimName: "${APPLICATION_NAME}-quickstatements"
        - name: mediawiki-images-data
          persistentVolumeClaim:
            claimName: "${APPLICATION_NAME}-wikibase"

- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-wikibase"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    ports:
    - name: 8181-tcp
      protocol: TCP
      port: 8181
      targetPort: 80
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}"
    type: ClusterIP
- kind: Route
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-wikibase"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    host: ''
    to:
      kind: Service
      name: "${APPLICATION_NAME}-wikibase"
      weight: 100
    port:
      targetPort: 8181-tcp
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect



## Might be necessary (config files to be mounted like a volume)
# - kind: ConfigMap
#   apiVersion: v1
#   metadata:
#     name: "${APPLICATION_NAME}-cfg"
#     labels:
#       app: "${APPLICATION_NAME}"
#   data:
#     jupyter_notebook_config.py: |
#       import os
#       password = os.environ.get('JUPYTER_NOTEBOOK_PASSWORD')
#       if password:
#           import notebook.auth
#           c.NotebookApp.password = notebook.auth.passwd(password)
#           del password
#           del os.environ['JUPYTER_NOTEBOOK_PASSWORD']
#       image_config_file = '/home/jovyan/.jupyter/jupyter_notebook_config.py'
#       if os.path.exists(image_config_file):
#           with open(image_config_file) as fp:
#               exec(compile(fp.read(), image_config_file, 'exec'), globals())