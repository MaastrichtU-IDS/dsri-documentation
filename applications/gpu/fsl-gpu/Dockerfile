# Generated by: Neurodocker version 0.7.0
# https://github.com/ReproNim/neurodocker

# https://ngc.nvidia.com/catalog/containers/nvidia:cuda
ARG CUDA_VERSION=9.1-devel-ubuntu16.04
# FSL 6.0.5: ARG CUDA_VERSION=10.2-devel-ubuntu18.04
# Default build is Ubuntu: ARG CUDA_VERSION=10.2-devel

FROM nvcr.io/nvidia/cuda:${CUDA_VERSION}
# FROM nvcr.io/nvidia/tensorflow:21.08-tf2-py3

USER root
WORKDIR /root

ARG DEBIAN_FRONTEND="noninteractive"

ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           libopenblas-dev \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    # && apt-get clean \
    # && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker

## TODO: Try to install GPU driver?
# RUN curl -s -L https://nvidia.github.io/nvidia-container-runtime/gpgkey | \
#     apt-key add - \ &&
#     distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \ &&
#     curl -s -L https://nvidia.github.io/nvidia-container-runtime/$distribution/nvidia-container-runtime.list | 
#     # tee /etc/apt/sources.list.d/nvidia-container-runtime.list

# RUN apt-get update \ &&
#     apt-get install -y nvidia-container-runtime


ENV FSLDIR="/opt/fsl-6.0.3" \
    PATH="/opt/fsl-6.0.3/bin:$PATH" \
    FSLOUTPUTTYPE="NIFTI_GZ" \
    FSLMULTIFILEQUIT="TRUE" \
    FSLTCLSH="/opt/fsl-6.0.3/bin/fsltclsh" \
    FSLWISH="/opt/fsl-6.0.3/bin/fslwish" \
    FSLLOCKDIR="" \
    FSLMACHINELIST="" \
    FSLREMOTECALL="" \
    FSLGECUDAQ="cuda.q"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           dc \
           file \
           libfontconfig1 \
           libfreetype6 \
           libgl1-mesa-dev \
           libgl1-mesa-dri \
           libglu1-mesa-dev \
           libgomp1 \
           libice6 \
           libxcursor1 \
           libxft2 \
           libxinerama1 \
           libxrandr2 \
           libxrender1 \
           libxt6 \
           sudo \
           wget \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading FSL ..." \
    && mkdir -p /opt/fsl-6.0.3 \
    && curl -fsSL --retry 5 https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.3-centos6_64.tar.gz \
    | tar -xz -C /opt/fsl-6.0.3 --strip-components 1 \
    && sed -i '$iecho Some packages in this Docker container are non-free' $ND_ENTRYPOINT \
    && sed -i '$iecho If you are considering commercial use of this container, please consult the relevant license:' $ND_ENTRYPOINT \
    && sed -i '$iecho https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Licence' $ND_ENTRYPOINT \
    && sed -i '$isource $FSLDIR/etc/fslconf/fsl.sh' $ND_ENTRYPOINT \
    && echo "Installing FSL conda environment ..." \
    && bash /opt/fsl-6.0.3/etc/fslconf/fslpython_install.sh -f /opt/fsl-6.0.3

RUN echo '{ \
    \n  "pkg_manager": "apt", \
    \n  "instructions": [ \
    \n    [ \
    \n      "base", \
    \n      "debian:stretch" \
    \n    ], \
    \n    [ \
    \n      "fsl", \
    \n      { \
    \n        "version": "6.0.3" \
    \n      } \
    \n    ] \
    \n  ] \
    \n}' > /neurodocker/neurodocker_specs.json

# Add conda to path
ENV PATH="/opt/fsl-6.0.3/fslpython/condabin:/opt/fsl-6.0.3/fslpython/bin:${PATH}" 

## Install Conda
# ENV CONDA_DIR=/opt/conda \
#     SHELL=/bin/bash \
#     LANG=en_US.UTF-8 \
#     LANGUAGE=en_US.UTF-8
# ENV PATH="${CONDA_DIR}/bin:${PATH}" 
# # Automatically download the latest release of conda miniforge
# RUN export download_url=$(curl -s https://api.github.com/repos/conda-forge/miniforge/releases/latest | grep browser_download_url | grep -P "Mambaforge-\d+((\.|-)\d+)*-Linux-x86_64.sh" | grep -v sha256 | cut -d '"' -f 4) && \
#     echo "Downloading latest miniforge from $download_url" && \
#     curl -Lf -o miniforge.sh $download_url && \
#     # curl -Lf "https://github.com/conda-forge/miniforge/releases/download/${miniforge_version}/${miniforge_installer}" -o miniforge.sh && \
#     /bin/bash "miniforge.sh" -f -b -p "${CONDA_DIR}" && \
#     rm "miniforge.sh" && \
#     conda config --system --set auto_update_conda false && \
#     conda config --system --set show_channel_urls true

RUN conda install --quiet -y \
    # conda \
    pip \
    notebook jupyterlab 
    # jupyterlab-lsp jupyter-lsp-python

EXPOSE 8888
ENTRYPOINT ["jupyter", "lab", "--allow-root", "--ip=0.0.0.0", "--port=8888", "--no-browser"]

# ENTRYPOINT ["/neurodocker/startup.sh"]
