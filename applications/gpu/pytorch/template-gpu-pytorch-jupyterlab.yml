---
kind: Template
apiVersion: template.openshift.io/v1
labels:
  template: gpu-pytorch-jupyterlab
metadata:
  name: gpu-pytorch-jupyterlab
  annotations:
    openshift.io/display-name: Pytorch on GPU with JupyterLab
    description: |-
      Start Pytorch on GPU using the root user. Provide the number of GPUs to run.
      
      ðŸ“‚ Use the `/workspace/notebooks` folder (workspace of the JupyterLab UI) to store your data in the existing persistent storage

      ðŸ”’ You need root containers enabled (aka. anyuid) in your project to start this application.
    iconClass: icon-python
    tags: python,gpu
    openshift.io/provider-display-name: Institute of Data Science, UM
    openshift.io/documentation-url: https://maastrichtu-ids.github.io/dsri-documentation/docs/deploy-jupyter
    openshift.io/support-url: https://maastrichtu-ids.github.io/dsri-documentation/help
    template.openshift.io/bindable: 'false'
parameters:
- name: APPLICATION_NAME
  displayName: Application name
  description: Must be unique in the project. It will be used to generate the application
    URL.
  value: gpu-pytorch-jupyterlab
  required: true
- name: STORAGE_SIZE
  displayName: Storage size
  description: Size of the storage allocated to the notebook persistent storage in `/home/jovyan`.
  value: 5Gi
  required: true
- name: GPU_LIMIT
  displayName: Number of GPU assigned
  description: 8 in total in the cluster. And your quota is 1 by default
  value: '1'
  required: true

# - name: MEMORY_LIMIT
#   displayName: Memory limit
#   description: Maximum RAM memory available for the application.
#   value: "60Gi"
#   required: true
# - name: CPU_LIMIT
#   displayName: CPU limit
#   description: Number of CPUs available for the application (in millicore, 1 CPU = 1000m).
#   value: "10000m"
#   required: true
objects:
# - apiVersion: v1
#   kind: Secret
#   metadata:
#     annotations:
#       template.openshift.io/expose-password: "{.data['application-password']}"
#     name: "${APPLICATION_NAME}"
#   stringData:
#     application-password: "${PASSWORD}"
    
- kind: "PersistentVolumeClaim"
  apiVersion: "v1"
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: "${APPLICATION_NAME}"
      template: gpu-tensorflow-jupyterlab
  spec:
    accessModes:
      - "ReadWriteMany"
    resources:
      requests:
        storage: ${STORAGE_SIZE}

- kind: DeploymentConfig
  apiVersion: apps.openshift.io/v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ConfigChange
    # - type: ImageChange
    #   imageChangeParams:
    #     automatic: true
    #     containerNames:
    #     - pytorch-container
    #     from:
    #       kind: ImageStreamTag
    #       name: nvidia-pytorch-gpu:19.12-py3
    replicas: 1
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}"
    template:
      metadata:
        labels:
          app: "${APPLICATION_NAME}"
          deploymentconfig: "${APPLICATION_NAME}"
      spec:
        serviceAccountName: anyuid
        nodeSelector:
          nvidia.com/gpu: 'true'
        volumes:
        - name: data
          persistentVolumeClaim:
            claimName: "${APPLICATION_NAME}"
        # - name: dshm
        #   emptyDir: {}    
        containers:
        - name: pytorch-container
          # image: nvidia-pytorch-gpu:19.12-py3
          image: nvcr.io/nvidia/pytorch:19.12-py3
          command:
            - jupyter
            - lab
          ports:
          - containerPort: 6006
            protocol: TCP
          - containerPort: 6064
            protocol: TCP
          - containerPort: 8888
            protocol: TCP
          resources:
            limits:
              nvidia.com/gpu: "${GPU_LIMIT}"
              # cpu: "${CPU_LIMIT}"
              # memory: "${MEMORY_LIMIT}"
          volumeMounts:
          - name: data
            mountPath: "/workspace/notebooks"
            # subPath: "${STORAGE_FOLDER}"
          # - name: dshm
          #   mountPath: /dev/shm
          
          # env:
          # - name: PASSWORD
          #   valueFrom:
          #     secretKeyRef:
          #       key: application-password
          #       name: "${APPLICATION_NAME}"
        automountServiceAccountToken: false

- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    ports:
    - name: 8888-tcp
      protocol: TCP
      port: 8888
      targetPort: 8888
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}"
- kind: Route
  apiVersion: route.openshift.io/v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    host: ''
    to:
      kind: Service
      name: "${APPLICATION_NAME}"
      weight: 100
    port:
      targetPort: 8888-tcp
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
