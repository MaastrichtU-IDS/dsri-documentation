---
kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: vscode-dynamic
  annotations:
    openshift.io/display-name: "VisualStudio Code in browser (Dynamic)" 
    description: |
      A distribution of Coder's VisualStudio Code in browser designed to work for CNCF-compliant orchestators.

      ðŸ“‚ Use the `/home/coder/projects` folder (workspace of the VSCode UI) to store your data in the persistent storage automatically created

      Already installed:
      - Python
      - Java 11
      - NodeJS

      You will not be able to install system packages after the application has started (e.g. with apt-get or yum)
    tags: visualstudio,vscode,dynamic
    iconClass: icon-kubevirt
    openshift.io/provider-display-name: Institute of Data Science, UM
    openshift.io/documentation-url: "https://github.com/jefferyb/code-server-openshift"
    openshift.io/support-url: https://maastrichtu-ids.github.io/dsri-documentation/help
    template.openshift.io/bindable: "false"
  labels:
    template: "vscode-dynamic"

parameters:
  - name: NAME
    description: Name of your application
    value: code-server
    required: true
  - name: PASSWORD
    description: Provide your own password, else, it defaults to "coder"
  - name: DOCKER_IMAGE
    description: Docker image to use
    value: jefferyb/code-server:latest
    required: true
  - name: CODER_ENABLE_AUTH
    description: Enable auth
    value: "true"
  - name: STORAGE_SIZE
    description: Persistent Volume Claim Storage space
    value: 10Gi

objects:

  - kind: ImageStream
    apiVersion: image.openshift.io/v1
    metadata:
      name: ${NAME}
      labels:
        app: ${NAME}
    spec:
      lookupPolicy:
        local: false
      tags:
      - annotations:
          openshift.io/imported-from: ${DOCKER_IMAGE}
        from:
          kind: DockerImage
          name: ${DOCKER_IMAGE}
        importPolicy: 
          scheduled: false
        name: latest
        referencePolicy:
          type: Source


  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${NAME}-projects
      labels:
        app: ${NAME}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: ${STORAGE_SIZE}
      storageClassName: ocs-storagecluster-cephfs


  - kind: Service
    apiVersion: v1
    metadata:
      name: ${NAME}
      labels:
        app: ${NAME}
    spec:
      ports:
        - name: 9000-tcp
          port: 9000
          protocol: TCP
          targetPort: 9000
      selector:
        app: ${NAME}
        deployment: ${NAME}
      type: ClusterIP


  - kind: Route
    apiVersion: route.openshift.io/v1
    metadata:
      name: ${NAME}
      labels:
        app: ${NAME}
    spec:
      port:
        targetPort: 9000-tcp
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      to:
        kind: Service
        name: ${NAME}
        weight: 100
      wildcardPolicy: None


  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: ${NAME}
      labels:
        app: ${NAME}
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: ${NAME}
          deployment: ${NAME}
      template:
        metadata:
          annotations:
            io.kubernetes.cri-o.TrySkipVolumeSELinuxLabel: 'true'
          labels:
            app: ${NAME}
            deployment: ${NAME}
        spec:
          runtimeClassName: selinux
          containers:
            - name: ${NAME}
              image: ${DOCKER_IMAGE}
              imagePullPolicy: IfNotPresent
              resources:
                limits:
                  cpu: '16'
                  memory: 36Gi
                requests:
                  cpu: '200m'
                  memory: 1Gi
              env:
                - name: CODER_ENABLE_AUTH
                  value: "${CODER_ENABLE_AUTH}"
                - name: CODER_PASSWORD
                  value: ${PASSWORD}
              ports:
                - containerPort: 9000
                  protocol: TCP
              volumeMounts:
                - mountPath: /home/coder/certs
                  name: ${NAME}-certs
                - mountPath: /home/coder/projects
                  name: ${NAME}-projects
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          securityContext: {}
          volumes:
            - emptyDir: {}
              name: ${NAME}-certs
            - name: ${NAME}-projects
              persistentVolumeClaim:
                claimName: ${NAME}-projects