---
kind: Template
apiVersion: template.openshift.io/v1
labels:
  template: jupyterlab-root
metadata:
  name: jupyterlab-root
  annotations:
    openshift.io/display-name: JupyterLab
    description: |-
      Start JupyterLab images as the `jovyan` user, with sudo privileges to install anything you need. 

      📂 Use the `/home/jovyan` folder (workspace of the JupyterLab UI) to store your data in the persistent storage automatically created
      You can find the persistent storage in the DSRI web UI, go to Administrator view > Storage > Persistent Volume Claims
      
      🐳 You can use any image based on the official Jupyter docker stack: https://github.com/jupyter/docker-stacks
      - jupyter/minimal-notebook
      - jupyter/scipy-notebook
      - jupyter/datascience-notebook (with Julia kernel)
      - jupyter/tensorflow-notebook
      - jupyter/r-notebook
      - jupyter/pyspark-notebook
      - jupyter/all-spark-notebook
      - ghcr.io/maastrichtu-ids/jupyterlab (with Java and SPARQL kernels)
      Or build your own! Checkout https://github.com/MaastrichtU-IDS/jupyterlab for an example of custom image

      📥 You can provide the URL to a git repository which will be cloned in your workspace at the start of JupyterLab. 
      If this repo contains files with list of packages in the root folder, they will be installed at start:
      - requirements.txt for pip packages
      - packages.txt for apt packages
      You can use this URL to clone a repository with some examples to use the DSRI: 
      https://github.com/MaastrichtU-IDS/dsri-demo
    iconClass: icon-python
    tags: python,jupyter,notebook
    openshift.io/provider-display-name: Institute of Data Science, UM
    openshift.io/documentation-url: https://maastrichtu-ids.github.io/dsri-documentation/docs/deploy-jupyter
    openshift.io/support-url: https://maastrichtu-ids.github.io/dsri-documentation/help
parameters:
- name: APPLICATION_NAME
  displayName: Name for the application
  description: Must be without spaces (use -), and unique in the project.
  value: jupyterlab
  required: true
- name: PASSWORD
  displayName: JupyterLab UI Password
  description: The password/token to access the JupyterLab web UI
  required: true
- name: GIT_URL
  displayName: URL of a git repository to clone in the workspace (optional)
  required: false
  description: It will be automatically cloned, then requirements.txt and packages.txt will be automatically installed if presents
- name: APPLICATION_IMAGE
  displayName: Jupyter notebook Docker image
  value: ghcr.io/maastrichtu-ids/jupyterlab:latest
  required: true
  description: You can use any image based on https://github.com/jupyter/docker-stacks
- name: STORAGE_SIZE
  displayName: Storage size
  description: Size of the storage allocated to the notebook persistent storage in `/home/jovyan`.
  value: 5Gi
  required: true
# - name: MEMORY_LIMIT
#   displayName: Memory limit
#   description: Maximum RAM memory available for the application.
#   value: "5Gi"
#   required: true
# - name: CPU_LIMIT
#   displayName: CPU limit
#   description: Number of CPUs available for the application.
#   value: "2"
#   required: true
objects:
- kind: "ImageStream"
  apiVersion: image.openshift.io/v1
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
      template: jupyterlab-root
  spec:
    tags:
    - name: latest
      from:
        kind: DockerImage
        name: ${APPLICATION_IMAGE}
      # importPolicy:
      #   scheduled: true
    lookupPolicy:
      local: true

- kind: "PersistentVolumeClaim"
  apiVersion: "v1"
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: "${APPLICATION_NAME}"
      template: jupyterlab-root
  spec:
    accessModes:
      - "ReadWriteMany"
    resources:
      requests:
        storage: ${STORAGE_SIZE}

- apiVersion: v1
  kind: Secret
  metadata:
    # annotations:
    #   template.openshift.io/expose-password: "{.data['application-password']}"
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
      template: jupyterlab-root
  stringData:
    application-password: "${PASSWORD}"

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
      template: jupyterlab-root
  spec:
    replicas: 1
    strategy:
      type: Recreate
      # type: Rolling
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - jupyter-notebook
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}"
    template:
      metadata:
        labels:
          app: "${APPLICATION_NAME}"
          deploymentconfig: "${APPLICATION_NAME}"
      spec:
        serviceAccountName: "anyuid"
        # nodeSelector:
        #   dsri.unimaas.nl/cpu: 'true'
        containers:
        - name: jupyter-notebook
          image: "${APPLICATION_NAME}:latest"
          command:
          - "start-notebook.sh"
          - "--no-browser"
          - "--ip=0.0.0.0"
          - "--config=/etc/jupyter/openshift/jupyter_notebook_config.py"
          ports:
          - containerPort: 8888
            protocol: TCP
          # SPARK UI if all-spark notebook deployed
          - containerPort: 4040 
            protocol: TCP
          - containerPort: 4041
            protocol: TCP
          env:
          - name: JUPYTER_TOKEN
            valueFrom:
              secretKeyRef:
                key: application-password
                name: "${APPLICATION_NAME}"
          - name: JUPYTER_ENABLE_LAB
            value: "yes"
          - name: GRANT_SUDO
            value: "yes"
          - name: GIT_URL
            value: "${GIT_URL}"
          volumeMounts:
          - name: data
            mountPath: "/home/jovyan"
          - name: configs
            mountPath: "/etc/jupyter/openshift"
          readinessProbe: 
            tcpSocket:
              port: 8888
          livenessProbe: 
            initialDelaySeconds: 15 
            tcpSocket:  
              port: 8888 
          failureThreshold: 40
          periodSeconds: 10
          timeoutSeconds: 2
          # resources:
          #   requests: 
          #     cpu: "${CPU_LIMIT}"
          #     memory: "${MEMORY_LIMIT}"
          #   limits:
          #     cpu: "128"
          #     memory: "300Gi"
        automountServiceAccountToken: false
        securityContext:
          runAsUser: 0
          supplementalGroups:
          - 100
        volumes:
        - name: data
          persistentVolumeClaim:
            claimName: "${APPLICATION_NAME}"
        - name: configs
          configMap:
            name: "${APPLICATION_NAME}-cfg"

- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
      template: jupyterlab-root
  spec:
    ports:
    - name: 8888-tcp
      protocol: TCP
      port: 8888
      targetPort: 8888
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}"
    type: ClusterIP
- kind: Route
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    host: ''
    to:
      kind: Service
      name: "${APPLICATION_NAME}"
      weight: 100
    port:
      targetPort: 8888-tcp
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect

# Service for Spark UI if needed
- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-spark-ui"
    labels:
      app: "${APPLICATION_NAME}"
      template: jupyterlab-root
  spec:
    ports:
    - name: 4040-tcp
      protocol: TCP
      port: 4040
      targetPort: 4040
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}"
    type: ClusterIP


- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-cfg"
    labels:
      app: "${APPLICATION_NAME}"
  data:
    # Clone git repo, then install requirements.txt and packages.txt
    jupyter_notebook_config.py: |
      import os
      git_url = os.environ.get('GIT_URL')
      home_dir = os.environ.get('HOME')
      os.chdir(home_dir)
      if git_url:
        repo_id = git_url.rsplit('/', 1)[-1].replace('.git', '')
        os.system('git clone --quiet --recursive ' + git_url)
        os.chdir(repo_id)
        if os.path.exists('packages.txt'):
          os.system('sudo apt-get update')
          os.system('cat packages.txt | xargs sudo apt-get install -y')
        if os.path.exists('requirements.txt'):
          os.system('pip install -r requirements.txt')
        if os.path.exists('extensions.txt'):
          os.system('cat extensions.txt | xargs -I {} jupyter {} install --user')
        os.chdir(home_dir)


# - kind: ConfigMap
#   apiVersion: v1
#   metadata:
#     name: "${APPLICATION_NAME}-cfg"
#     labels:
#       app: "${APPLICATION_NAME}"
#   data:
#     entrypoint.sh: |
#       #!/bin/bash

#       CMD="start-notebook.sh --ip=0.0.0.0 --no-browser"
#       # CMD="jupyter lab --allow-root --ip=0.0.0.0 --no-browser"

#       if [[ -v GIT_URL ]]; then
#         git clone $GIT_URL $HOME
#       fi

#       if [ -f $HOME/packages.txt ]; then
#         echo "INFO: Found packages.txt file in folder /notebooks. Executing it to install apt packages."
#         apt-get update
#         cat packages.txt | xargs apt-get install -y
#       else
#         echo "INFO: packages.txt not found in folder /notebooks --> Continuing"
#       fi

#       if [ -f $HOME/requirements.txt ]; then
#         echo "INFO: Found requirements.txt file in folder /notebooks. Installing via \"pip install -r requirements.txt\""
#         pip install -r requirements.txt
#       else
#         echo "INFO: requirements.txt not found in folder /notebooks --> Continuing"
#       fi

#       if [ -f $HOME/extensions.txt ]; then
#         echo "INFO: Found extensions.txt file in folder /notebooks. Installing via \"jupyter extension install --user\""
#         cat extensions.txt | xargs -I {} jupyter {} install --user
#       else
#         echo "INFO: extensions.txt not found in folder /notebooks --> Continuing"
#       fi  
