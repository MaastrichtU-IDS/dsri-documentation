kind: Template
apiVersion: template.openshift.io/v1
labels:
  template: jupyterlab-root
metadata:
  name: jupyterlab-root
  annotations:
    openshift.io/display-name: JupyterLab
    description: |-
      Start JupyterLab images based on the official Docker stack, as the `jovyan` user, with sudo privileges to install anything you need.

      üê≥ You can use any image based on the official Jupyter docker stack:
      - ghcr.io/maastrichtu-ids/jupyterlab (with VSCode, Java and SPARQL kernels)
      - ghcr.io/maastrichtu-ids/jupyterlab:knowledge-graph (with VSCode, Java, SPARQL kernels and KG tools)
      - jupyter/minimal-notebook
      - jupyter/scipy-notebook
      - jupyter/datascience-notebook (with Julia kernel)
      - jupyter/tensorflow-notebook
      - jupyter/r-notebook
      - jupyter/pyspark-notebook
      - jupyter/all-spark-notebook
      - elyra/elyra (extension for Kuberflow pipelines)

      Checkout https://github.com/MaastrichtU-IDS/jupyterlab to see how our custom image is built, and how to extend it
      For more details on the jupyter docker stack, go to https://github.com/jupyter/docker-stacks

      üî• With our ghcr.io/maastrichtu-ids/jupyterlab image you can provide the URL to a git repository which will be cloned in your workspace at the start of JupyterLab.
      If this repo contains files with list of packages in the root folder, they will be installed at start:
      - requirements.txt for pip packages
      - packages.txt for apt packages
      You can use this URL to clone a repository with some examples to use the DSRI:
      https://github.com/MaastrichtU-IDS/dsri-demo

      üìÇ Use the persistent folder in the workspace of the JupyterLab UI (usually /home/jovyan/work/persistent folder) to store your data in the persistent storage automatically created
      You can find the persistent storage in the DSRI web UI, go to Search > Resources > Persistent Volume Claim.

      üì¶ We recommend you to use `conda install` to install new packages, but you can also use `sudo apt-get install` or `pip install`

      üóëÔ∏è Use this command with your application name to delete completely your application and its persistent volumes:
      oc delete all,pvc,secret,configmaps,serviceaccount,rolebinding --selector app=$APPLICATION_NAME
    iconClass: icon-python
    tags: python,jupyter,notebook
    openshift.io/provider-display-name: Institute of Data Science, UM
    openshift.io/documentation-url: https://maastrichtu-ids.github.io/dsri-documentation/docs/deploy-jupyter
    openshift.io/support-url: https://maastrichtu-ids.github.io/dsri-documentation/help
parameters:
- name: APPLICATION_NAME
  displayName: Name for the application
  description: Must be without spaces (use -), and unique in the project.
  value: jupyterlab
  required: true
- name: PASSWORD
  displayName: JupyterLab UI Password
  description: The password/token to access the JupyterLab web UI
  required: true
- name: APPLICATION_IMAGE
  displayName: Jupyter notebook Docker image
  value: ghcr.io/maastrichtu-ids/jupyterlab:latest
  required: true
  description: Check the description on the right for more details about available images
- name: STORAGE_SIZE
  displayName: Storage size
  description: Size of the storage allocated to the notebook persistent storage.
  value: 5Gi
  required: true
- name: GIT_URL
  displayName: URL of a git repository to clone in the workspace (optional)
  required: false
  description: It will be automatically cloned, then requirements.txt and packages.txt will be automatically installed if presents. Only works for images based on the official images
- name: GIT_NAME
  displayName: Git name
  required: true
  value: default
  description: Email used to automatically define git config --global user.name
- name: GIT_EMAIL
  displayName: Git email
  required: true
  value: default@maastrichtuniversity.nl
  description: Email used to automatically define git config --global user.email

objects:
- kind: "ImageStream"
  apiVersion: image.openshift.io/v1
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
      template: jupyterlab-root
  spec:
    tags:
    - name: latest
      from:
        kind: DockerImage
        name: ${APPLICATION_IMAGE}
      importPolicy:
        scheduled: false
    lookupPolicy:
      local: true

- kind: "PersistentVolumeClaim"
  apiVersion: "v1"
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: "${APPLICATION_NAME}"
      template: jupyterlab-root
  spec:
    accessModes:
      - "ReadWriteMany"
    resources:
      requests:
        storage: ${STORAGE_SIZE}
    storageClassName: ocs-storagecluster-cephfs

- apiVersion: v1
  kind: Secret
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
      template: jupyterlab-root
  stringData:
    application-password: "${PASSWORD}"

- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
      template: jupyterlab-root
  spec:
    replicas: 1
    strategy:
      type: Recreate
    selector:
      matchLabels:
        app: "${APPLICATION_NAME}"
        deployment: "${APPLICATION_NAME}"
    template:
      metadata:
        annotations:
          io.kubernetes.cri-o.TrySkipVolumeSELinuxLabel: 'true'
        labels:
          app: "${APPLICATION_NAME}"
          deployment: "${APPLICATION_NAME}"
      spec:
        runtimeClassName: selinux
        serviceAccountName: "anyuid"
        containers:
        - name: jupyter-notebook
          image: "${APPLICATION_IMAGE}"
          imagePullPolicy: Always
          workingDir: /home/jovyan/work
          ports:
          - containerPort: 8888
            protocol: TCP
          - containerPort: 4040 
            protocol: TCP
          - containerPort: 4041
            protocol: TCP
          env:
          - name: JUPYTER_TOKEN
            valueFrom:
              secretKeyRef:
                key: application-password
                name: "${APPLICATION_NAME}"
          - name: JUPYTER_ENABLE_LAB
            value: "yes"
          - name: GRANT_SUDO
            value: "yes"
          - name: GIT_URL
            value: "${GIT_URL}"
          - name: GIT_NAME
            value: "${GIT_NAME}"
          - name: GIT_EMAIL
            value: "${GIT_EMAIL}"
          volumeMounts:
          - name: data
            mountPath: /home/jovyan/work/persistent
          - name: dshm
            mountPath: /dev/shm
          readinessProbe:
            tcpSocket:
              port: 8888
          livenessProbe:
            initialDelaySeconds: 15
            tcpSocket:
              port: 8888
            failureThreshold: 40
            periodSeconds: 10
            timeoutSeconds: 2
          resources:
            limits:
              cpu: '32'
              memory: 200Gi
            requests:
              cpu: 200m
              memory: 256Mi
        automountServiceAccountToken: false
        securityContext:
          runAsUser: 0
          supplementalGroups:
          - 100
        volumes:
        - name: data
          persistentVolumeClaim:
            claimName: "${APPLICATION_NAME}"
        - name: dshm
          emptyDir:
            medium: Memory

- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
      template: jupyterlab-root
  spec:
    ports:
    - name: 8888-tcp
      protocol: TCP
      port: 8888
      targetPort: 8888
    selector:
      app: "${APPLICATION_NAME}"
      deployment: "${APPLICATION_NAME}"
    type: ClusterIP

- kind: Route
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    host: ''
    to:
      kind: Service
      name: "${APPLICATION_NAME}"
      weight: 100
    port:
      targetPort: 8888-tcp
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect