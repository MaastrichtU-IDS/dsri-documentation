---
kind: Template
apiVersion: template.openshift.io/v1
labels:
  template: custom-workspace
metadata:
  name: custom-workspace
  annotations:
    openshift.io/display-name: Custom workspace
    description: |-
      Use this template to start a custom Docker image, and easily run your code through a web UI exposed on port 8888, such as JupyterLab or VSCode

      üì¶ We recommend you to use `conda install` to install new packages, but you can also use `sudo apt-get install` or `pip install`

      üìÇ Use the workspace of the web UI (/root usually) to store your data in the persistent storage automatically created
      You can find the persistent storage in the DSRI web UI, go to Administrator view > Storage > Persistent Volume Claims
      
      üê≥ Docker images, see https://github.com/MaastrichtU-IDS/jupyterlab for more details
      - Ricopili package:
      ghcr.io/maastrichtu-ids/jupyterlab:ricopili
      - JupyterLab with python2.7:
      ghcr.io/maastrichtu-ids/jupyterlab:python2.7

      Should work with most basic Docker image if the web UI is exposed on port 8888
    iconClass: icon-beaker
    tags: custom,interface,root
    openshift.io/provider-display-name: Institute of Data Science, UM
    openshift.io/documentation-url: https://maastrichtu-ids.github.io/dsri-documentation/docs
    openshift.io/support-url: https://maastrichtu-ids.github.io/dsri-documentation/help
parameters:
- name: APPLICATION_NAME
  displayName: Name for the application
  description: Must be without spaces (use -), and unique in the project.
  value: custom-workspace
  required: true
- name: PASSWORD
  displayName: Web UI Password
  description: The password to access the web UI
  required: true
- name: APPLICATION_IMAGE
  displayName: Docker image
  value: ghcr.io/maastrichtu-ids/jupyterlab:ricopili
  required: true
  description: Docker image of your application in a public registry
- name: STORAGE_SIZE
  displayName: Storage size
  description: Size of the storage allocated to the notebook persistent storage.
  value: 5Gi
  required: true
- name: WORKDIR
  displayName: Working directory
  description: The working directory in your container (will be stored persistently). This depends on the image, refer to the description on the right, or the image docs.
  value: /root
  required: true
# - name: PORT
#   displayName: Web UI port
#   description: Port on which the application is served
#   value: "8888"
#   required: true
# - name: MEMORY_LIMIT
#   displayName: Memory limit
#   description: Maximum RAM memory available for the application.
#   value: "5Gi"
#   required: true
# - name: CPU_LIMIT
#   displayName: CPU limit
#   description: Number of CPUs available for the application.
#   value: "2"
#   required: true
objects:
- kind: "ImageStream"
  apiVersion: image.openshift.io/v1
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
      template: custom-workspace
  spec:
    tags:
    - name: latest
      from:
        kind: DockerImage
        name: ${APPLICATION_IMAGE}
      importPolicy:
        scheduled: false
    lookupPolicy:
      local: true

- kind: "PersistentVolumeClaim"
  apiVersion: "v1"
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: "${APPLICATION_NAME}"
      template: custom-workspace
  spec:
    accessModes:
      - "ReadWriteMany"
    resources:
      requests:
        storage: ${STORAGE_SIZE}

- apiVersion: v1
  kind: Secret
  metadata:
    # annotations:
    #   template.openshift.io/expose-password: "{.data['application-password']}"
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
      template: custom-workspace
  stringData:
    application-password: "${PASSWORD}"

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
      template: custom-workspace
  spec:
    replicas: 1
    strategy:
      type: Recreate
      # type: Rolling
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - custom-app
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}"
    template:
      metadata:
        labels:
          app: "${APPLICATION_NAME}"
          deploymentconfig: "${APPLICATION_NAME}"
      spec:
        serviceAccountName: "anyuid"
        # nodeSelector:
        #   dsri.unimaas.nl/cpu: 'true'
        containers:
        - name: custom-app
          image: "${APPLICATION_NAME}:latest"
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 8888
            protocol: TCP
          env:
          - name: JUPYTER_TOKEN
            valueFrom:
              secretKeyRef:
                key: application-password
                name: "${APPLICATION_NAME}"
          - name: PASSWORD
            # For other apps like VSCode
            valueFrom:
              secretKeyRef:
                key: application-password
                name: "${APPLICATION_NAME}"
          volumeMounts:
          - name: data
            mountPath: "${WORKDIR}"
          - name: dshm
            mountPath: /dev/shm
          # readinessProbe: 
          #   tcpSocket:
          #     port: 8888
          # livenessProbe: 
          #   initialDelaySeconds: 15 
          #   tcpSocket:  
          #     port: 8888 
          # failureThreshold: 40
          # periodSeconds: 10
          # timeoutSeconds: 2
          # resources:
          #   requests: 
          #     cpu: "${CPU_LIMIT}"
          #     memory: "${MEMORY_LIMIT}"
          #   limits:
          #     cpu: "128"
          #     memory: "300Gi"
        automountServiceAccountToken: false
        volumes:
        - name: data
          persistentVolumeClaim:
            claimName: "${APPLICATION_NAME}"
        - name: dshm
          emptyDir:
            medium: Memory

- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
      template: custom-workspace
  spec:
    ports:
    - name: 8888-tcp
      protocol: TCP
      port: 8888
      targetPort: 8888
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}"
    type: ClusterIP
- kind: Route
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
      template: custom-workspace
  spec:
    host: ''
    to:
      kind: Service
      name: "${APPLICATION_NAME}"
      weight: 100
    port:
      targetPort: 8888-tcp
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect


