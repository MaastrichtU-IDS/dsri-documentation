apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: cellprofiler
  annotations:
    openshift.io/display-name: CellProfiler
    description: |-
      Start the CellProfiler with the 'root' user which has sudo permissions to install anything.

      ðŸ“‚ Use the `/usr/local/src` folder to store your data in the existing persistent storage
      You can find the persistent storage in the DSRI web UI, go to Administrator view > Storage > Persistent Volume Claims

      To run the CellProfiler in the terminal:
      cellprofiler --help
      cellprofiler --run
      cellprofiler --run-headless

      Use the GitHub mirror to avoid DockerHub pull limits (cf. https://github.com/MaastrichtU-Library/cellprofiler): 
      ghcr.io/maastrichtu-library/cellprofiler

      Or use the official image from https://hub.docker.com/r/cellprofiler/cellprofiler
      cellprofiler/cellprofiler:4.1.3
    iconClass: icon-amq
    tags: cellprofiler,persistent
    openshift.io/provider-display-name: Institute of Data Science, UM
    openshift.io/documentation-url: https://maastrichtu-ids.github.io/dsri-documentation/docs/
    openshift.io/support-url: https://maastrichtu-ids.github.io/dsri-documentation/help
labels:
  template: cellprofiler
message: |-
  A cellprofiler pod has been scheduled for creation in your project, and should be soon available.
  Building images takes some minutes to complete, so please be patient. You can follow progress on your projects overview page.

  You can use `oc get pods` to get the pod ID and connect using your local terminal `oc rsh POD_ID`
  Or use the terminal tab in the cellprofiler pod view of the OpenShift web UI

parameters:
  - name: APPLICATION_NAME
    displayName: Application name
    description: Must be without spaces (use -), and unique in the project.
    value: cellprofiler
    required: true
  - name: APPLICATION_IMAGE
    displayName: Application Docker image
    description: See https://hub.docker.com/r/cellprofiler/cellprofiler for more details on the image
    value: ghcr.io/maastrichtu-library/cellprofiler:latest
    required: true
  - name: STORAGE_SIZE
    displayName: Storage size
    description: Size of the storage used for the notebook (approximate).
    value: 10Gi
    required: true

objects:
  # 1. ImageStream
  - kind: ImageStream
    apiVersion: image.openshift.io/v1
    metadata:
      name: "${APPLICATION_NAME}"
      labels:
        app: "${APPLICATION_NAME}"
        template: cellprofiler 
    spec:
      lookupPolicy:
        local: true
      tags:
        - name: latest
          from:
            kind: DockerImage
            name: ${APPLICATION_IMAGE}
          importPolicy:
            scheduled: false

  # 2. Persistent Volume Claim
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: "${APPLICATION_NAME}"
      labels:
        app: "${APPLICATION_NAME}"
    spec:
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: ${STORAGE_SIZE}
      storageClassName: ocs-storagecluster-cephfs

  # 3. Service - SKIPPED (Not needed for this template)

  # 4. Route - SKIPPED (Not needed for this template)

  # 5. Secret - SKIPPED (Not needed for this template)

  # 6. Deployment
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: "${APPLICATION_NAME}"
      labels:
        app: "${APPLICATION_NAME}"
    spec:
      replicas: 1
      strategy:
        type: Recreate
      selector:
        matchLabels:
          app: "${APPLICATION_NAME}"
      template:
        metadata:
          annotations:
            io.kubernetes.cri-o.TrySkipVolumeSELinuxLabel: 'true'
          labels:
            app: "${APPLICATION_NAME}"
            deployment: "${APPLICATION_NAME}"
        spec:
          runtimeClassName: selinux
          serviceAccountName: anyuid
          automountServiceAccountToken: false
          volumes:
            - name: data
              persistentVolumeClaim:
                claimName: "${APPLICATION_NAME}"
          containers:
            - name: cellprofiler-container
              image: "${APPLICATION_IMAGE}"
              imagePullPolicy: IfNotPresent
              command: [ "tail", "-f", "/dev/null"]
              ports:
                - containerPort: 8080
                  protocol: TCP
              volumeMounts:
                - name: data
                  mountPath: "/usr/local/src"
              resources:
                requests:
                  cpu: '2'
                  memory: 4Gi
                limits:
                  cpu: '32'
                  memory: 200Gi