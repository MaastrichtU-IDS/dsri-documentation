---
kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: ontotext-graphdb
  annotations:
    openshift.io/display-name: Ontotext GraphDB
    description: |-
      Start a Ontotext GraphDB triplestore, with a SPARQL endpoint

      🔐 After accessing GraphDB for the first time you can easily enable security, and define a password for the admin user.

      📂 We use the folder `/opt/graphdb/home` in the container to store the database and import folder in the persistent storage
      You can find the persistent storage in the DSRI web UI, go to Administrator view > Storage > Persistent Volume Claims

      Visit https://github.com/Ontotext-AD/graphdb-docker for more details about the image used
    iconClass: icon-datavirt
    tags: triplestore,graph,database,rdf,sparql
    openshift.io/provider-display-name: Institute of Data Science, UM
    openshift.io/documentation-url: https://maastrichtu-ids.github.io/dsri-documentation/docs/deploy-database#ontotext-graphdb-triplestore
    openshift.io/support-url: https://maastrichtu-ids.github.io/dsri-documentation/help
labels:
  template: ontotext-graphdb
parameters:
- name: APPLICATION_NAME
  displayName: Application name
  description: Must be without spaces (use -), and unique in the project.
  value: graphdb
  required: true
- name: GRAPHDB_JAVA_MEMORY
  displayName: GraphDB java memory
  description: Maximum memory allocated to java for GraphDB (-xms and -xmx)
  value: 8g
  required: true
- name: STORAGE_SIZE
  displayName: Storage size
  description: Size of the storage used for the application.
  value: 20Gi
  required: true
- name: APPLICATION_IMAGE
  displayName: Application Docker image name 
  description: The GraphDB image needs to be build manually first and publish in your project
  value: graphdb:latest
  required: true

objects:
- apiVersion: "v1"
  kind: "PersistentVolumeClaim"
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    accessModes:
      - "ReadWriteMany"
    resources:
      requests:
        storage: ${STORAGE_SIZE}

- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Recreate
    replicas: 1
    selector:
      matchLabels:
        app: "${APPLICATION_NAME}"
        deployment: "${APPLICATION_NAME}"
    template:
      metadata:
        annotations:
          io.kubernetes.cri-o.TrySkipVolumeSELinuxLabel: 'true'
        labels:
          app: "${APPLICATION_NAME}"
          deployment: "${APPLICATION_NAME}"
      spec:
        runtimeClassName: selinux
        serviceAccountName: anyuid
        volumes:
        - name: data
          persistentVolumeClaim:
            claimName: "${APPLICATION_NAME}"
        containers:
        - name: ontotext-graphdb
          image: ${APPLICATION_IMAGE}
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 7200
            protocol: TCP
          volumeMounts:
          - name: data
            mountPath: "/opt/graphdb/home"
          env:
          - name: GDB_JAVA_OPTS
            value: |
              -Xmx${GRAPHDB_JAVA_MEMORY} -Xms${GRAPHDB_JAVA_MEMORY}
              -Dgraphdb.home=/opt/graphdb/home
              -Dgraphdb.workbench.importDirectory=/opt/graphdb/home/import
              -Dgraphdb.workbench.cors.enable=true
              -Denable-context-index=true
              -Dentity-pool-implementation=transactional
              -Dgraphdb.append.request.id.headers=true
              -Dreuse.vars.in.subselects=true
        automountServiceAccountToken: false

- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    ports:
    - name: 7200-tcp
      protocol: TCP
      port: 7200
      targetPort: 7200
    selector:
      app: "${APPLICATION_NAME}"
      deployment: "${APPLICATION_NAME}"

- kind: Route
  apiVersion: route.openshift.io/v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    host: ''
    to:
      kind: Service
      name: "${APPLICATION_NAME}"
      weight: 100
    port:
      targetPort: 7200-tcp
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect