"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[695],{5680:(e,t,r)=>{r.d(t,{xA:()=>u,yg:()=>g});var n=r(6540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(r),g=a,m=d["".concat(l,".").concat(g)]||d[g]||c[g]||o;return r?n.createElement(m,i(i({ref:t},u),{},{components:r})):n.createElement(m,i({ref:t},u))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5669:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var n=r(9668),a=r(1367),o=(r(6540),r(5680)),i=["components"],s={id:"neuroscience",title:"Neuroscience research"},l=void 0,p={unversionedId:"neuroscience",id:"neuroscience",title:"Neuroscience research",description:"We are not expert in Neuroscience ourselves, please contact us if you see any improvements that could be made to this page, or if you need any help to get it working.",source:"@site/docs/deploy-neurodocker.md",sourceDirName:".",slug:"/neuroscience",permalink:"/docs/neuroscience",draft:!1,editUrl:"https://github.com/MaastrichtU-IDS/dsri-documentation/edit/master/website/docs/deploy-neurodocker.md",tags:[],version:"current",lastUpdatedBy:"Adekunle Onaopepo",lastUpdatedAt:1737366298,formattedLastUpdatedAt:"Jan 20, 2025",frontMatter:{id:"neuroscience",title:"Neuroscience research"},sidebar:"docs",previous:{title:"Run MPI jobs",permalink:"/docs/mpi-jobs"},next:{title:"Genomics",permalink:"/docs/catalog-genomics"}},u={},c=[{value:"JupyterLab with FreeSurfer",id:"jupyterlab-with-freesurfer",level:2},{value:"FreeSurfer and FSL",id:"freesurfer-and-fsl",level:2},{value:"FreeSurfer and AFNI",id:"freesurfer-and-afni",level:2},{value:"Deploy the generated Dockerfile",id:"deploy-the-generated-dockerfile",level:2},{value:"Use the GPUs",id:"use-the-gpus",level:2}],d={toc:c};function g(e){var t=e.components,r=(0,a.A)(e,i);return(0,o.yg)("wrapper",(0,n.A)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("admonition",{title:"Feedbacks welcome",type:"tip"},(0,o.yg)("p",{parentName:"admonition"},"We are not expert in Neuroscience ourselves, please contact us if you see any improvements that could be made to this page, or if you need any help to get it working.")),(0,o.yg)("p",null,"The Neurodocker project helps you to create a Docker image with the Neuroscience softwares you need, such as FSL, FreeSurfer, AFNI or ANTs. "),(0,o.yg)("p",null,"Checkout the Neurodocker documentation for more details: ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/ReproNim/neurodocker"},"https://github.com/ReproNim/neurodocker")),(0,o.yg)("admonition",{title:"Examples",type:"info"},(0,o.yg)("p",{parentName:"admonition"},"In this page we will show you how to generate a Docker image with popular Neuroscience research softwares installed such as FreeSurfer and FSL. Feel free to check the ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/ReproNim/neurodocker"},"Neurodocker documentation"),", and adapt the installation process to your needs.")),(0,o.yg)("h2",{id:"jupyterlab-with-freesurfer"},"JupyterLab with FreeSurfer"),(0,o.yg)("p",null,"Start a JupyterLab container with Freesurfer pre-installed providing admin (",(0,o.yg)("inlineCode",{parentName:"p"},"sudo"),") privileges to install anything you need from the terminal (e.g. pip or apt packages)"),(0,o.yg)("p",null,"When instantiating the template you can provide a few parameters similar to the standard JupyterLab, such as:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"Password")," to access the notebook"),(0,o.yg)("li",{parentName:"ul"},"Optionally you can provide a ",(0,o.yg)("strong",{parentName:"li"},"git repository")," to be automatically cloned in the JupyterLab (if there is a ",(0,o.yg)("inlineCode",{parentName:"li"},"requirements.txt")," packages will be automatically installed with ",(0,o.yg)("inlineCode",{parentName:"li"},"pip"),")"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"Docker image")," to use for the notebook (see below for more details on customizing the docker image) "),(0,o.yg)("li",{parentName:"ul"},"Your ",(0,o.yg)("strong",{parentName:"li"},"git username and email")," to automatically configure git")),(0,o.yg)("p",null,"The DSRI will automatically create a persistent volume to store data you will put in the ",(0,o.yg)("inlineCode",{parentName:"p"},"/home/jovyan/work")," folder (the folder used by the notebook interface). You can find the persistent volumes in the DSRI web UI, go to the ",(0,o.yg)("strong",{parentName:"p"},"Administrator")," view > ",(0,o.yg)("strong",{parentName:"p"},"Storage")," > ",(0,o.yg)("strong",{parentName:"p"},"Persistent Volume Claims")),(0,o.yg)("img",{src:"/img/screenshot-freesurfer.png",alt:"Deploy Freesurfer",style:{maxWidth:"100%",maxHeight:"100%"}}),(0,o.yg)("p",null,"You can also link your git repository to the project for automatic deployment see ",(0,o.yg)("a",{parentName:"p",href:"https://dsri.maastrichtuniversity.nl/docs/deploy-jupyter#-use-git-in-jupyterlab"},"using git in JupyterLab")),(0,o.yg)("p",null,"This can also be deployed using Helm from the terminal, the steps are:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"helm repo add dsri https://maastrichtu-ids.github.io/dsri-helm-charts/\nhelm repo update\nhelm install freesurfer dsri/jupyterlab \\\n  --set serviceAccount.name=anyuid \\\n  --set openshiftRoute.enabled=true \\\n  --set image.repository=ghcr.io/maastrichtu-ids/jupyterlab \\\n  --set image.tag=freesurfer \\\n  --set storage.mountPath=/root \\\n  --set password=changeme\noc get route --selector app.kubernetes.io/instance=freesurfer --no-headers -o=custom-columns=HOST:.spec.host\n")),(0,o.yg)("p",null,"Log in to the corresponding jupyter notebook and start the terminal, then enter ",(0,o.yg)("inlineCode",{parentName:"p"},"freesurfer")," as a command"),(0,o.yg)("h2",{id:"freesurfer-and-fsl"},"FreeSurfer and FSL"),(0,o.yg)("p",null,"Generate a ",(0,o.yg)("inlineCode",{parentName:"p"},"Dockerfile")," with:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"FreeSurfer 6.0.1"),(0,o.yg)("li",{parentName:"ul"},"FSL 6.0.3")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"docker run --rm repronim/neurodocker:0.7.0 generate docker \\\n    --base debian:stretch --pkg-manager apt \\\n    --freesurfer version=6.0.1 --fsl version=6.0.3 > Dockerfile\n")),(0,o.yg)("h2",{id:"freesurfer-and-afni"},"FreeSurfer and AFNI"),(0,o.yg)("p",null,"Generate a ",(0,o.yg)("inlineCode",{parentName:"p"},"Dockerfile")," with:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"FreeSurfer 6.0.1"),(0,o.yg)("li",{parentName:"ul"},"AFNI, R and Python3")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"docker run --rm repronim/neurodocker:0.7.0 generate docker \\\n    --base debian:stretch --pkg-manager apt \\\n    --afni version=latest install_r=true install_r_pkgs=true install_python3=true \\\n    --freesurfer version=6.0.1 > Dockerfile\n")),(0,o.yg)("h2",{id:"deploy-the-generated-dockerfile"},"Deploy the generated Dockerfile"),(0,o.yg)("p",null,"Before deploying the ",(0,o.yg)("inlineCode",{parentName:"p"},"Dockerfile")," to the DSRI you can open it, and add commands to install additional package you are interested in, such as nighres or nipype."),(0,o.yg)("p",null,"Checkout the documentation to ",(0,o.yg)("a",{parentName:"p",href:"https://maastrichtu-ids.github.io/dsri-documentation/docs/guide-dockerfile-to-openshift"},"deploy the ",(0,o.yg)("inlineCode",{parentName:"a"},"Dockerfile")," on DSRI"),". "),(0,o.yg)("admonition",{title:"UI with VNC",type:"note"},(0,o.yg)("p",{parentName:"admonition"},"Running a UI with VNC (e.g. FSLeyes) is still a work in progress. See ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/ReproNim/neurodocker/issues/343"},"this issue for more details"),".")),(0,o.yg)("h2",{id:"use-the-gpus"},"Use the GPUs"),(0,o.yg)("p",null,"More details about using GPU with FSL: ",(0,o.yg)("a",{parentName:"p",href:"https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/GPU"},"https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/GPU")))}g.isMDXComponent=!0}}]);