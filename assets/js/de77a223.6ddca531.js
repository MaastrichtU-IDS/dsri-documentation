"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9232],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>m});var o=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,o)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,o,n=function(e,t){if(null==e)return{};var a,o,n={},l=Object.keys(e);for(o=0;o<l.length;o++)a=l[o],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)a=l[o],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=o.createContext({}),c=function(e){var t=o.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},s=function(e){var t=c(e.components);return o.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=c(a),m=n,k=u["".concat(p,".").concat(m)]||u[m]||d[m]||l;return a?o.createElement(k,r(r({ref:t},s),{},{components:a})):o.createElement(k,r({ref:t},s))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,r=new Array(l);r[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:n,r[1]=i;for(var c=2;c<l;c++)r[c]=a[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9880:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var o=a(7462),n=a(3366),l=(a(7294),a(3905)),r=["components"],i={id:"guide-dockerfile-to-openshift",title:"Deploy from a Dockerfile"},p=void 0,c={unversionedId:"guide-dockerfile-to-openshift",id:"guide-dockerfile-to-openshift",title:"Deploy from a Dockerfile",description:"Build from local Dockerfile",source:"@site/docs/guide-dockerfile-to-openshift.md",sourceDirName:".",slug:"/guide-dockerfile-to-openshift",permalink:"/docs/guide-dockerfile-to-openshift",editUrl:"https://github.com/MaastrichtU-IDS/dsri-documentation/edit/master/website/docs/guide-dockerfile-to-openshift.md",tags:[],version:"current",lastUpdatedBy:"Vincent Emonet",lastUpdatedAt:1649354756,formattedLastUpdatedAt:"4/7/2022",frontMatter:{id:"guide-dockerfile-to-openshift",title:"Deploy from a Dockerfile"},sidebar:"docs",previous:{title:"GPU applications",permalink:"/docs/deploy-on-gpu"},next:{title:"Deploy from a Docker image",permalink:"/docs/deploy-from-docker"}},s={},d=[{value:"Build from local Dockerfile",id:"build-from-local-dockerfile",level:2},{value:"Create new build configuration.",id:"create-new-build-configuration",level:3},{value:"Build the image",id:"build-the-image",level:3},{value:"Create your app",id:"create-your-app",level:3},{value:"Expose app",id:"expose-app",level:3},{value:"Delete the created build",id:"delete-the-created-build",level:3},{value:"Deploy from a local docker image",id:"deploy-from-a-local-docker-image",level:2},{value:"Deploy from a Git repository",id:"deploy-from-a-git-repository",level:2}],u={toc:d};function m(e){var t=e.components,a=(0,n.Z)(e,r);return(0,l.kt)("wrapper",(0,o.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"build-from-local-dockerfile"},"Build from local Dockerfile"),(0,l.kt)("p",null,"This manual shows you an example of how to convert a dockerfile from your local machine to a running container on DSRI (openshift / okd). Start by cloning the example repository to your local machine."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"git clone git@gitlab.maastrichtuniversity.nl:dsri-examples/dockerfile-to-okd.git\n")),(0,l.kt)("p",null,"After cloning you now have a local folder containing a Dockerfile and index.html file. Inspect both files."),(0,l.kt)("p",null,"Login with the openshift client:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"oc login https://console-openshift-console.apps.dsri2.unimaas.nl\n")),(0,l.kt)("p",null,"Create a new project if you don't have a project yet you can work with (change myproject to a project name of your choice:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"oc new-project myproject\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"create-new-build-configuration"},"Create new build configuration."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"oc new-build --name dockerfile-to-okd --binary\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"build-the-image"},"Build the image"),(0,l.kt)("p",null,"Start a new build on the DSRI with the files provided:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"cd dockerfile-to-okd\noc start-build dockerfile-to-okd --from-dir=. --follow --wait\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"create-your-app"},"Create your app"),(0,l.kt)("p",null,"Create a new app using the build we just created:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"oc new-app dockerfile-to-okd\n")),(0,l.kt)("p",null,"To properly deploy your app on OpenShift you will need to define a few more parameters:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Enable root user access (with ",(0,l.kt)("inlineCode",{parentName:"li"},"serviceAccountName"),") by running this command:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'oc patch deployment/dockerfile-to-okd --patch \'{"spec":{"template": {"spec":{"serviceAccountName": "anyuid"}}}}\'\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"You can also add persistent storage (with ",(0,l.kt)("inlineCode",{parentName:"p"},"volumes")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"containers: volumeMounts")," )"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"${STORAGE_NAME}"),": Name of your persistent volume claim in the ",(0,l.kt)("strong",{parentName:"li"},"Storage")," page of your project in the web UI"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"${STORAGE_FOLDER}")," : Name of the folder inside the persistent volume claim to store the application data (so you can store multiple applications on the same persistent volume claim)")))),(0,l.kt)("p",null,"Open the configuration of the started app to fix its configuration:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"oc edit deployment/dockerfile-to-okd\n")),(0,l.kt)("p",null,"You can mount existing persistent volume this way (replace the variables, such as ",(0,l.kt)("inlineCode",{parentName:"p"},"${STORAGE_NAME}")," by your values):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'    template:\n      spec:\n        serviceAccountName: anyuid\n        volumes:\n        - name: data\n          persistentVolumeClaim:\n            claimName: "${STORAGE_NAME}"\n        containers:\n        - image: rstudio-root:latest\n          volumeMounts:\n          - name: data\n            mountPath: "/home/rstudio"\n            subPath: "${STORAGE_FOLDER}"\n')),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Generate deployment file in YAML")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"You can also generate the app deployment in a YAML file to edit it before start:"),(0,l.kt)("pre",{parentName:"div"},(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"oc new-app dockerfile-to-okd -o yaml > myapp.yml\n# Edit myapp.yml\noc create -f myapp.yml\n")))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"expose-app"},"Expose app"),(0,l.kt)("p",null,"Expose the application so you can reach it from your browser and check the route that was created"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"oc expose svc/dockerfile-to-okd\noc get route\n")),(0,l.kt)("p",null,"You can now visit the route shown in the HOST/PORT output of the ",(0,l.kt)("inlineCode",{parentName:"p"},"oc get route")," command and see if you have successfully converted the docker file. "),(0,l.kt)("p",null,"You can edit the created route to enable HTTPS with this command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'oc patch route/dockerfile-to-okd --patch \'{"spec":{"tls": {"termination": "edge", "insecureEdgeTerminationPolicy": "Redirect"}}}\'\n')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"delete-the-created-build"},"Delete the created build"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"oc delete build dockerfile-to-okd\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"See ",(0,l.kt)("a",{parentName:"p",href:"https://docs.openshift.com/enterprise/3.0/cli_reference/basic_cli_operations.html#application-modification-cli-operations"},"oc delete documentation"),".")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"deploy-from-a-local-docker-image"},"Deploy from a local docker image"),(0,l.kt)("p",null,"You can also deploy a local docker image from your machine. "),(0,l.kt)("p",null,"First build the docker image:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker build -t my-docker-image:latest .\n")),(0,l.kt)("p",null,"Check you have the image locally on your system:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker images ls\n")),(0,l.kt)("p",null,"You should have a docker image for your application:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"REPOSITORY                                   TAG                 \nmy-docker-image                              latest\n")),(0,l.kt)("p",null,"You can then deploy providing the docker image name and the name of the application to be deployed:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-abash"},"oc new-app my-docker-image --name app-name-on-openshift\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"deploy-from-a-git-repository"},"Deploy from a Git repository"),(0,l.kt)("p",null,"Go to ",(0,l.kt)("strong",{parentName:"p"},"+Add")," > ",(0,l.kt)("strong",{parentName:"p"},"From Git"),": ",(0,l.kt)("a",{parentName:"p",href:"https://console-openshift-console.apps.dsri2.unimaas.nl/import"},"https://console-openshift-console.apps.dsri2.unimaas.nl/import")),(0,l.kt)("p",null,"Follow the instructions given by the web UI: provide the URL to your git repository, the port on which the web interface will be deployed, you can also create a secret for git login if the repository is private."),(0,l.kt)("p",null,"Once the container has started you will need to make a small change to enable it running with any user ID (due to OpenShift security policies)."),(0,l.kt)("p",null,"You can do it with the command line (just change ",(0,l.kt)("inlineCode",{parentName:"p"},"your-app-name")," by your application name)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'oc patch deployment/your-app-name --patch \'{"spec":{"template": {"spec":{"serviceAccountName": "anyuid"}}}}\'\n')),(0,l.kt)("p",null,"Or through the web UI: click on your deployment, then ",(0,l.kt)("strong",{parentName:"p"},"Actions")," > ",(0,l.kt)("strong",{parentName:"p"},"Edit Deployment"),". And edit the YAML of your deployment to add ",(0,l.kt)("inlineCode",{parentName:"p"},"serviceAccountName: anyuid")," under ",(0,l.kt)("inlineCode",{parentName:"p"},"template.spec"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"    template:\n      spec:\n        serviceAccountName: anyuid\n        containers:\n        - [...]\n")))}m.isMDXComponent=!0}}]);