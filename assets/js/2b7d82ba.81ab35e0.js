"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8454],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=p(n),m=a,d=h["".concat(l,".").concat(m)]||h[m]||c[m]||r;return n?o.createElement(d,i(i({ref:t},u),{},{components:n})):o.createElement(d,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9050:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var o=n(7462),a=n(3366),r=(n(7294),n(3905)),i=["components"],s={id:"workflows-github-actions",title:"Deploy GitHub Runners"},l=void 0,p={unversionedId:"workflows-github-actions",id:"workflows-github-actions",title:"Deploy GitHub Runners",description:"Deploy a GitHub Actions runner to run workflows simple to define using YAML, and hosted in your GitHub repository on the DSRI. This allows you to run larger workloads than on GitHub-hosted runners, which are limited to 7G RAM, 1 CPU and 6h per job.",source:"@site/docs/workflows-github-actions.md",sourceDirName:".",slug:"/workflows-github-actions",permalink:"/docs/workflows-github-actions",editUrl:"https://github.com/MaastrichtU-IDS/dsri-documentation/edit/master/website/docs/workflows-github-actions.md",tags:[],version:"current",lastUpdatedBy:"Vincent Emonet",lastUpdatedAt:1655368732,formattedLastUpdatedAt:"6/16/2022",frontMatter:{id:"workflows-github-actions",title:"Deploy GitHub Runners"},sidebar:"docs",previous:{title:"Introduction to workflows",permalink:"/docs/workflows-introduction"},next:{title:"Deploy Airflow",permalink:"/docs/workflows-airflow"}},u={},c=[{value:"Install the chart",id:"install-the-chart",level:2},{value:"Deploy a Runner",id:"deploy-a-runner",level:2},{value:"For an organization",id:"for-an-organization",level:3},{value:"For a repository",id:"for-a-repository",level:3},{value:"Define Actions to run on DSRI",id:"define-actions-to-run-on-dsri",level:2},{value:"Uninstall the runner",id:"uninstall-the-runner",level:2},{value:"Deploy using GitHub Actions workflows",id:"deploy-using-github-actions-workflows",level:2},{value:"See also",id:"see-also",level:2}],h={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Deploy a GitHub Actions runner to run workflows simple to define using YAML, and hosted in your GitHub repository on the DSRI. This allows you to run larger workloads than on GitHub-hosted runners, which are limited to 7G RAM, 1 CPU and 6h per job."),(0,r.kt)("p",null,"Here are some of the advantage of GitHub Actions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A step can be any Bash command, or a reusable Action from the ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/marketplace/"},"GitHub Marketplace"),", which can be easily define from a Docker container, and share with your collaborators"),(0,r.kt)("li",{parentName:"ul"},"Parallelization can easily be added manually or dynamically to up to 255 jobs"),(0,r.kt)("li",{parentName:"ul"},"It provides a good logging system directly available in your repository on GitHub"),(0,r.kt)("li",{parentName:"ul"},"Define triggers (on code push, cron job, manual request), and secrets (such as passwords) easily")),(0,r.kt)("p",null,"For more informations about GitHub Actions workflows, go to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/features/actions"},"https://github.com/features/actions")),(0,r.kt)("h2",{id:"install-the-chart"},"Install the chart"),(0,r.kt)("p",null,"You will need to have Helm installed on your computer to deploy a GitHub Actions Runner, see the ",(0,r.kt)("a",{parentName:"p",href:"/docs/helm"},"Helm docs")," for more details."),(0,r.kt)("p",null,"Install the Helm chart to be able to deploy the GitHub Actions Runner on the DSRI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add openshift-actions-runner https://redhat-actions.github.io/openshift-actions-runner-chart\nhelm repo update\n")),(0,r.kt)("p",null,"Then create a GitHub Personal Access Token as per the instructions in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/redhat-actions/openshift-actions-runner#pat-guidelines"},"runner image README"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"tl;dr:")," go to your Settings on GitHub: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/settings/tokens"},"https://github.com/settings/tokens"),", click the button to create a new token, give it a meaningful name (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"DSRI Runner my-project"),"), and check the following permissions:"),(0,r.kt)("p",null,"\u2705\ufe0f ",(0,r.kt)("inlineCode",{parentName:"p"},"repo")," (maybe also ",(0,r.kt)("inlineCode",{parentName:"p"},"workflow"),"?)"),(0,r.kt)("p",null,"\u2705\ufe0f ",(0,r.kt)("inlineCode",{parentName:"p"},"admin:org")," if the Runner is for an organization"),(0,r.kt)("h2",{id:"deploy-a-runner"},"Deploy a Runner"),(0,r.kt)("p",null,"Before deploying the runner, make sure you are in the project where you want to deploy it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"oc project my-project\n")),(0,r.kt)("h3",{id:"for-an-organization"},"For an organization"),(0,r.kt)("p",null,"Deploy a runner available for all repositories of an organization (you can fine tune the access via GitHub Settings)"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Provide the token previously created, and the organization name")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'export GITHUB_PAT="TOKEN"\nexport GITHUB_OWNER=My-Org\n')),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Deploy the runner for the organization:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'helm install actions-runner openshift-actions-runner/actions-runner \\\n    --set-string githubPat=$GITHUB_PAT \\\n    --set-string githubOwner=$GITHUB_OWNER \\\n    --set runnerLabels="{ dsri, $GITHUB_OWNER }" \\\n    --set replicas=3 \\\n    --set serviceAccountName=anyuid \\\n    --set memoryRequest="512Mi" \\\n    --set memoryLimit="100Gi" \\\n    --set cpuRequest="100m" \\\n    --set cpuLimit="64"\n')),(0,r.kt)("p",null,"You can also change the default runner image:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"    --set runnerImage=ghcr.io/vemonet/github-actions-conda-runner \\\n    --set runnerTag=latest\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Checkout ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/redhat-actions/openshift-actions-runner-chart/blob/main/values.yaml"},"all available parameters here"))),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Check the deployment:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm get manifest actions-runner | kubectl get -f -\n")),(0,r.kt)("p",null,"Go to your organization Settings page on GitHub, then go to the ",(0,r.kt)("strong",{parentName:"p"},"Actions")," tab, and scroll to the bottom. In the list of active runners you should see the runners you just deployed. "),(0,r.kt)("h3",{id:"for-a-repository"},"For a repository"),(0,r.kt)("p",null,"You can also deploy a runner for a specific repository:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'export GITHUB_PAT="TOKEN"\n# For an org runner, this is the org.\n# For a repo runner, this is the repo owner (org or user).\nexport GITHUB_OWNER=vemonet\n# For an org runner, omit this argument. \n# For a repo runner, the repo name.\nexport GITHUB_REPO=shapes-of-you\n')),(0,r.kt)("p",null,"Deploy the runner:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'helm install actions-runner openshift-actions-runner/actions-runner \\\n    --set-string githubPat=$GITHUB_PAT \\\n    --set-string githubOwner=$GITHUB_OWNER \\\n    --set-string githubRepository=$GITHUB_REPO \\\n    --set runnerLabels="{ dsri, anything-helpful }"\n')),(0,r.kt)("h2",{id:"define-actions-to-run-on-dsri"},"Define Actions to run on DSRI"),(0,r.kt)("p",null,"You can now set GitHub Action workflows, in the ",(0,r.kt)("inlineCode",{parentName:"p"},".github/workflows")," folder, to be run on this runner (the repository needs to be under the organization, or user you added the workflow to). The job will be sent to run on the DSRI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'jobs:\n    your-job:\n      runs-on: ["self-hosted", "dsri", "my-org" ]\n      steps: ...\n')),(0,r.kt)("h2",{id:"uninstall-the-runner"},"Uninstall the runner"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm uninstall actions-runner\n")),(0,r.kt)("h2",{id:"deploy-using-github-actions-workflows"},"Deploy using GitHub Actions workflows"),(0,r.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"Experimental")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Experimental: this deployment workflow is still experimental, let us know on Slack if you are interested in using it."))),(0,r.kt)("p",null,"Alternatively you can also build and deploy your application using a GitHub Actions workflow."),(0,r.kt)("p",null,"You will need to connect to the UM VPN in your workflow by defining 2 secrets for ",(0,r.kt)("inlineCode",{parentName:"p"},"VPN_USER")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"VPN_PASSWORD"),", this is done by this step:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"- name: Connect to the VPN\n  run: |\n    sudo apt-get install -y openconnect network-manager-openconnect\n    echo '${{ secrets.VPN_PASSWORD }}' | sudo openconnect --passwd-on-stdin --no-xmlpost --non-inter --background --authgroup 01-Employees --user ${{ secrets.VPN_USER }} vpn.maastrichtuniversity.nl\n    sleep 10\n")),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"RedHat documentation")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"RedHat provides the following instructions and template to deploy an application on OpenShift"))),(0,r.kt)("p",null,"The OpenShift Starter workflow will:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Checkout your repository"),(0,r.kt)("li",{parentName:"ul"},"Perform a Docker build"),(0,r.kt)("li",{parentName:"ul"},"Push the built image to an image registry"),(0,r.kt)("li",{parentName:"ul"},"Log in to your OpenShift cluster"),(0,r.kt)("li",{parentName:"ul"},"Create an OpenShift app from the image and expose it to the internet.")),(0,r.kt)("p",null,"Before you begin:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Have write access to a container image registry such as quay.io or Dockerhub."),(0,r.kt)("li",{parentName:"ul"},"Have access to an OpenShift cluster.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"For instructions to get started with OpenShift see ",(0,r.kt)("a",{parentName:"li",href:"https://www.openshift.com/try"},"https://www.openshift.com/try")))),(0,r.kt)("li",{parentName:"ul"},"The project you wish to add this workflow to should have a Dockerfile.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If you don't have a Dockerfile at the repository root, see the buildah-build step."),(0,r.kt)("li",{parentName:"ul"},"Builds from scratch are also available, but require more configuration.")))),(0,r.kt)("p",null,"To get the workflow running:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Add this workflow to your repository."),(0,r.kt)("li",{parentName:"ol"},"Edit the top-level 'env' section, which contains a list of environment variables that must be configured."),(0,r.kt)("li",{parentName:"ol"},"Create the secrets referenced in the 'env' section under your repository Settings."),(0,r.kt)("li",{parentName:"ol"},"Edit the 'branches' in the 'on' section to trigger the workflow on a push to your branch."),(0,r.kt)("li",{parentName:"ol"},"Commit and push your changes.")),(0,r.kt)("p",null,"For a more sophisticated example, see ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/redhat-actions/spring-petclinic/blob/main/.github/workflows/petclinic-sample.yaml"},"https://github.com/redhat-actions/spring-petclinic/blob/main/.github/workflows/petclinic-sample.yaml"),"\nAlso see our GitHub organization, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/redhat-actions/"},"https://github.com/redhat-actions/")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'name: Deploy to OpenShift\n\n# \u2b07\ufe0f  Modify the fields marked with \u2b07\ufe0f to fit your project, and create any secrets that are referenced.\n# https://docs.github.com/en/free-pro-team@latest/actions/reference/encrypted-secrets\nenv:\n  # \u2b07\ufe0f EDIT with your registry and registry path.\n  REGISTRY: ghcr.io/maastrichtu-ids\n  # \u2b07\ufe0f EDIT with your registry username.\n  REGISTRY_USER: <username>\n  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}\n\n  # \u2b07\ufe0f EDIT to log into your OpenShift cluster and set up the context.\n  # See https://github.com/redhat-actions/oc-login#readme for how to retrieve these values.\n  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}\n  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}\n\n  # \u2b07\ufe0f EDIT with the port your application should be accessible on.\n  APP_PORT: 8080\n\n  # \u2b07\ufe0f EDIT if you wish to set the kube context\'s namespace after login. Leave blank to use the default namespace.\n  OPENSHIFT_NAMESPACE: ""\n\n  # If you wish to manually provide the APP_NAME and TAG, set them here, otherwise they will be auto-detected.\n  APP_NAME: "my-app"\n  TAG: ""\n\non:\n  # https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows\n  push:\n    # Edit to the branch(es) you want to build and deploy on each push.\n    branches: [ main ]\n\njobs:\n  openshift-ci-cd:\n    name: Build and deploy to OpenShift\n    runs-on: ubuntu-20.04\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Determine app name\n      if: env.APP_NAME == \'\'\n      run: |\n        echo "APP_NAME=$(basename $PWD)" | tee -a $GITHUB_ENV\n\n    - name: Determine tag\n      if: env.TAG == \'\'\n      run: |\n        echo "TAG=${GITHUB_SHA::7}" | tee -a $GITHUB_ENV\n\n    # https://github.com/redhat-actions/buildah-build#readme\n    - name: Build from Dockerfile\n      uses: redhat-actions/buildah-build@v1\n      with:\n        image: ${{ env.APP_NAME }}\n        tag: ${{ env.TAG }}\n        # If you don\'t have a dockerfile, see:\n        # https://github.com/redhat-actions/buildah-build#building-from-scratch\n        # Otherwise, point this to your Dockerfile relative to the repository root.\n        dockerfiles: |\n          ./Dockerfile\n\n    # https://github.com/redhat-actions/push-to-registry#readme\n    - name: Push to registry\n      id: push-to-registry\n      uses: redhat-actions/push-to-registry@v1\n      with:\n        image: ${{ env.APP_NAME }}\n        tag: ${{ env.TAG }}\n        registry: ${{ env.REGISTRY }}\n        username: ${{ env.REGISTRY_USER }}\n        password: ${{ env.REGISTRY_PASSWORD }}\n\n    # The path the image was pushed to is now stored in ${{ steps.push-to-registry.outputs.registry-path }}\n\n    - name: Connect to the VPN\n      run: |\n        sudo apt-get install -y openconnect network-manager-openconnect\n        echo \'${{ secrets.VPN_PASSWORD }}\' | sudo openconnect --passwd-on-stdin --no-xmlpost --non-inter --background --authgroup 01-Employees --user ${{ secrets.VPN_USER }} vpn.maastrichtuniversity.nl\n        sleep 10\n\n    # oc-login works on all platforms, but oc must be installed first.\n    # The GitHub Ubuntu runner already includes oc.\n    # https://github.com/redhat-actions/oc-login#readme\n    - name: Log in to OpenShift\n      uses: redhat-actions/oc-login@v1\n      with:\n        openshift_server_url: ${{ env.OPENSHIFT_SERVER }}\n        openshift_token: ${{ env.OPENSHIFT_TOKEN }}\n        insecure_skip_tls_verify: true\n        namespace: ${{ env.OPENSHIFT_NAMESPACE }}\n\n    # This step should create a deployment, service, and route to run your app and expose it to the internet.\n    # Feel free to replace this with \'oc apply\', \'helm install\', or however you like to deploy your app.\n    - name: Create and expose app\n      run: |\n        export IMAGE="${{ steps.push-to-registry.outputs.registry-path }}"\n        export PORT=${{ env.APP_PORT }}\n\n        export SELECTOR="app=${{ env.APP_NAME }}"\n        echo "SELECTOR=$SELECTOR" >> $GITHUB_ENV\n\n        set -x\n        # Take down any old deployment\n        oc delete all --selector="$SELECTOR"\n        oc new-app --name $APP_NAME --docker-image="$IMAGE"\n\n        # Make sure the app port is exposed\n        oc patch svc $APP_NAME -p "{ \\"spec\\": { \\"ports\\": [{ \\"name\\": \\"$PORT-tcp\\", \\"port\\": $PORT }] } }"\n        oc expose service $APP_NAME --port=$PORT\n\n        oc get all --selector="$SELECTOR"\n        set +x\n\n        export ROUTE="$(oc get route $APP_NAME -o jsonpath=\'{.spec.host}\')"\n        echo "$APP_NAME is exposed at $ROUTE"\n        echo "ROUTE=$ROUTE" >> $GITHUB_ENV\n\n    - name: View application route\n      run: |\n        [[ -n ${{ env.ROUTE }} ]] || (echo "Determining application route failed in previous step"; exit 1)\n        echo "======================== Your application is available at: ========================"\n        echo ${{ env.ROUTE }}\n        echo "==================================================================================="\n        echo\n        echo "Your app can be taken down with: \\"oc delete all --selector=\'${{ env.SELECTOR }}\'\\""\n')),(0,r.kt)("h2",{id:"see-also"},"See also"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"GitHub runner chart repository: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/redhat-actions/openshift-actions-runner-chart"},"https://github.com/redhat-actions/openshift-actions-runner-chart"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Image for the runner: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/redhat-actions/openshift-actions-runner"},"https://github.com/redhat-actions/openshift-actions-runner"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"An action to automatically deploy a runner on a cluster (require to run openconnect to VPN first): ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/redhat-actions/openshift-actions-runner"},"https://github.com/redhat-actions/openshift-actions-runner")))))}m.isMDXComponent=!0}}]);