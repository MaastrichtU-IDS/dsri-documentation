"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9215],{5680:(e,t,a)=>{a.d(t,{xA:()=>d,yg:()=>g});var n=a(6540);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var i=n.createContext({}),p=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(a),g=o,u=m["".concat(i,".").concat(g)]||m[g]||c[g]||r;return a?n.createElement(u,s(s({ref:t},d),{},{components:a})):n.createElement(u,s({ref:t},d))}));function g(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,s=new Array(r);s[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var p=2;p<r;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},7853:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>g,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var n=a(9668),o=a(1367),r=(a(6540),a(5680)),s=["components"],l={id:"deploy-database",title:"Databases"},i=void 0,p={unversionedId:"deploy-database",id:"deploy-database",title:"Databases",description:"SQL databases",source:"@site/docs/deploy-database.md",sourceDirName:".",slug:"/deploy-database",permalink:"/docs/deploy-database",draft:!1,editUrl:"https://github.com/MaastrichtU-IDS/dsri-documentation/edit/master/website/docs/deploy-database.md",tags:[],version:"current",lastUpdatedBy:"lwinckers",lastUpdatedAt:1745401186,formattedLastUpdatedAt:"Apr 23, 2025",frontMatter:{id:"deploy-database",title:"Databases"},sidebar:"docs",previous:{title:"VisualStudio Code",permalink:"/docs/deploy-vscode"},next:{title:"Matlab",permalink:"/docs/deploy-matlab"}},d={},c=[{value:"SQL databases",id:"sql-databases",level:2},{value:"Start PostgreSQL \ud83d\udc18",id:"start-postgresql-",level:3},{value:"Start MySQL \ud83d\udc2c",id:"start-mysql-",level:3},{value:"NoSQL databases",id:"nosql-databases",level:2},{value:"MongoDB \ud83c\udf3f",id:"mongodb-",level:3},{value:"Redis \ud83c\udfb2",id:"redis-",level:3},{value:"Graph databases",id:"graph-databases",level:2},{value:"OpenLink Virtuoso triplestore",id:"openlink-virtuoso-triplestore",level:3},{value:"Ontotext GraphDB triplestore",id:"ontotext-graphdb-triplestore",level:3}],m={toc:c};function g(e){var t=e.components,a=(0,o.A)(e,s);return(0,r.yg)("wrapper",(0,n.A)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"sql-databases"},"SQL databases"),(0,r.yg)("p",null,"You can easily create a database from the templates available in the DSRI OpenShift web UI catalog:"),(0,r.yg)("img",{src:"/img/screenshot-databases.png",alt:"Databases in catalog web UI",style:{maxWidth:"100%",maxHeight:"100%"}}),(0,r.yg)("p",null,"You can connect to a database from another application in the same project by using the database service name as hostname:"),(0,r.yg)("img",{src:"/img/screenshot_database_service.png",alt:"Databases in catalog web UI",style:{maxWidth:"100%",maxHeight:"100%"}}),(0,r.yg)("p",null,"You can also use the ",(0,r.yg)("inlineCode",{parentName:"p"},"oc")," CLI to get the services in your project:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"oc get services\n")),(0,r.yg)("h3",{id:"start-postgresql-"},"Start PostgreSQL \ud83d\udc18"),(0,r.yg)("p",null,"Use the ",(0,r.yg)("strong",{parentName:"p"},"Postgresql")," template in the DSRI OpenShift web UI catalog to start a SQL database. "),(0,r.yg)("admonition",{title:"Connect to the database",type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"When the database has been deployed, you can connect from another pod using your favorite language and connector.")),(0,r.yg)("p",null,"Example with the ",(0,r.yg)("inlineCode",{parentName:"p"},"psql")," Command Line Interface:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"apt-get update && apt-get install postgresql-client -y\n")),(0,r.yg)("p",null,"Connect to the Postgresql database using the service name (change depending on the username and database name you chose):"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"psql -h postgresql-db -U postgres db\n")),(0,r.yg)("p",null,"Checkout the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/MaastrichtU-IDS/dsri-demo"},"dsri-demo repository")," for a quick demo for accessing and using a PostgreSQL database from a Jupyter notebook on the DSRI."),(0,r.yg)("h3",{id:"start-mysql-"},"Start MySQL \ud83d\udc2c"),(0,r.yg)("p",null,"Use the ",(0,r.yg)("strong",{parentName:"p"},"MySQL")," template in the DSRI OpenShift web UI catalog."),(0,r.yg)("admonition",{title:"Connect to the database",type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"When the database has been deployed, you can connect from another pod using your favorite language and connector.")),(0,r.yg)("p",null,"Example with the ",(0,r.yg)("inlineCode",{parentName:"p"},"mysql")," Command Line Interface:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"apt-get update && apt-get install mariadb-client -y\n")),(0,r.yg)("p",null,"Connect to the MySQL database using the service name:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"mysql -h example-mysql -p\n")),(0,r.yg)("p",null,"Checkout the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/MaastrichtU-IDS/dsri-demo"},"dsri-demo repository")," for a quick demo for accessing and using a MySQL database from a Jupyter notebook on the DSRI."),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Alternatively, MySQL databases can be started using Helm, see the ",(0,r.yg)("a",{parentName:"p",href:"/docs/helm#install-a-helm-chart"},"Helm documentation page")," for more details.")),(0,r.yg)("h2",{id:"nosql-databases"},"NoSQL databases"),(0,r.yg)("h3",{id:"mongodb-"},"MongoDB \ud83c\udf3f"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.mongodb.com/"},"MongoDB")," is a general purpose, document-based, distributed database built for modern application developers and for the cloud era. "),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"MongoDB")," can be deployed via Helm Chart as follows:"),(0,r.yg)("p",null,"1) Install the Helm Client as explained in (",(0,r.yg)("a",{parentName:"p",href:"https://dsri.maastrichtuniversity.nl/docs/helm"},"https://dsri.maastrichtuniversity.nl/docs/helm"),")"),(0,r.yg)("p",null,"2) Add the Bitnami Helm Repository. Bitnami offers a wide range of Helm charts, and you can add their repository with the following command:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"}," helm repo add bitnami https://charts.bitnami.com/bitnami\n\n helm repo update\n")),(0,r.yg)("p",null,"3) you can ",(0,r.yg)("strong",{parentName:"p"},"deploy MongoDB")," as follows:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"   helm install my-mongodb bitnami/mongodb\n")),(0,r.yg)("p",null,"4) You can connect with ",(0,r.yg)("strong",{parentName:"p"},"my-mongodb")," as follows (within the cluster, for ex; via a terminal session opened at ",(0,r.yg)("a",{parentName:"p",href:"https://console-openshift-console.apps.dsri2.unimaas.nl/"},"https://console-openshift-console.apps.dsri2.unimaas.nl/"),"):"),(0,r.yg)("p",null,"In the follwoing scripts, we assume that we are working with a project/namespace named as 'manu-test'. Replace this with your own project/namespace name.\nMongoDB can be accessed on the following DNS name(s) and ports from within your cluster:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"my-mongodb.manu-test.svc.cluster.local\n")),(0,r.yg)("p",null,"To get the root password run:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'export MONGODB_ROOT_PASSWORD=$(kubectl get secret --namespace manu-test my-mongodb -o jsonpath="{.data.mongodb-root-password}" | base64 -d)\n')),(0,r.yg)("p",null,"To connect to your database, create a MongoDB; client container:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"kubectl run --namespace manu-test my-mongodb-client --rm --tty -i --restart='Never' --env=\"MONGODB_ROOT_PASSWORD=$MONGODB_ROOT_PASSWORD\" --image docker.io/bitnami/mongodb:8.0.4-debian-12-r0 --command -- bash\n")),(0,r.yg)("p",null,"Then, run the following command:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'export MONGODB_ROOT_USER="root"\nmongosh admin --host "my-mongodb" --authenticationDatabase admin --username $MONGODB_ROOT_USER --password $MONGODB_ROOT_PASSWORD\n')),(0,r.yg)("p",null,"To connect to your database from outside the cluster execute the following commands:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"kubectl port-forward --namespace manu-test svc/my-mongodb 27017:27017 &\nmongosh --host 127.0.0.1 --authenticationDatabase admin --username $MONGODB_ROOT_USER --password $MONGODB_ROOT_PASSWORD\n")),(0,r.yg)("h3",{id:"redis-"},"Redis \ud83c\udfb2"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"http://redis.io/"},"Redis")," is an advanced key-value cache and store. It is often referred to as a data structure server since keys can contain  strings, hashes, lists, sets, sorted sets, bitmaps and hyperlog."),(0,r.yg)("p",null,"Use the ",(0,r.yg)("strong",{parentName:"p"},"Redis")," template in the DSRI OpenShift web UI catalog."),(0,r.yg)("admonition",{title:"Connect to the database",type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"Use the service name as hostname to connect from another pod in the same project.")),(0,r.yg)("h2",{id:"graph-databases"},"Graph databases"),(0,r.yg)("h3",{id:"openlink-virtuoso-triplestore"},"OpenLink Virtuoso triplestore"),(0,r.yg)("p",null,"Search for the ",(0,r.yg)("strong",{parentName:"p"},"Virtuoso triplestore")," template in the DSRI web UI catalog. Instantiate the template to create a Virtuoso triplestore in your project."),(0,r.yg)("p",null,"The deployment is based on the latest open source version of Virtuoso: ",(0,r.yg)("a",{parentName:"p",href:"https://hub.docker.com/r/openlink/virtuoso-opensource-7"},"https://hub.docker.com/r/openlink/virtuoso-opensource-7")),(0,r.yg)("admonition",{title:"Connect to the database",type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"Use the service name as hostname to connect from another pod in the same project.")),(0,r.yg)("h3",{id:"ontotext-graphdb-triplestore"},"Ontotext GraphDB triplestore"),(0,r.yg)("p",null,"Use the official DockerHub image if you have an enterprise license. Or ",(0,r.yg)("a",{parentName:"p",href:"https://maastrichtu-ids.github.io/dsri-documentation/docs/guide-dockerfile-to-openshift"},"build")," GraphDB free edition image from ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/Ontotext-AD/graphdb-docker"},"graphdb-docker on GitHub"),"."),(0,r.yg)("p",null,"After downloading the ",(0,r.yg)("inlineCode",{parentName:"p"},".zip")," file from the github to your laptop, unzip it and go the ",(0,r.yg)("inlineCode",{parentName:"p"},"graphdb-docker-master")," folder in your terminal:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"cd graphdb-docker-master\n")),(0,r.yg)("p",null,"Before creating your GraphDB ImageStream, make sure you are in the right project:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"oc project my-project\n")),(0,r.yg)("p",null,"Create the ImageStream for GraphDB:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"oc new-build --name graphdb --binary\n")),(0,r.yg)("p",null,"Build the image on the DSRI and save it in the ImageStream:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"oc start-build graphdb --from-dir=. --follow --wait\n")),(0,r.yg)("p",null,"You can now use the ",(0,r.yg)("strong",{parentName:"p"},"Ontotext GraphDB")," template to deploy a GraphDB instance on DSRI. "),(0,r.yg)("p",null,"Use the name of the ImageStream when instantiating the template, you can check if the image was properly built in ",(0,r.yg)("strong",{parentName:"p"},"Search")," > Filter ",(0,r.yg)("strong",{parentName:"p"},"Resources")," for ImageStreams"),(0,r.yg)("admonition",{title:"Connect to the database",type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"Use the service name as hostname to connect from another pod in the same project.")))}g.isMDXComponent=!0}}]);